"use strict";(self.webpackChunkchickensoft_site=self.webpackChunkchickensoft_site||[]).push([[866],{4612:e=>{e.exports=JSON.parse('{"blogPosts":[{"id":"gdscript-vs-csharp","metadata":{"permalink":"/blog/gdscript-vs-csharp","source":"@site/blog/2023-04-26-gdscript-vs-csharp/index.md","title":"GDScript vs C# in Godot 4","description":"Deep-dive into the advantages and disadvantages of GDScript and C#, as well as tips on how to choose one \u2014 or use them both!","date":"2023-04-26T00:00:00.000Z","formattedDate":"April 26, 2023","tags":[],"readingTime":9.435,"hasTruncateMarker":true,"authors":[{"name":"Joanna","title":"Founder @ Chickensoft","url":"/authors/joanna","imageURL":"/img/authors/joanna.jpg","key":"joanna"}],"frontMatter":{"title":"GDScript vs C# in Godot 4","description":"Deep-dive into the advantages and disadvantages of GDScript and C#, as well as tips on how to choose one \u2014 or use them both!","image":"./header.jpg","slug":"gdscript-vs-csharp","keywords":["Godot","game engine","GDScript","C#","programming language","game development","indie game development","scripting","performance optimization","syntax comparison","cross-platform","community support","tutorials","comparison","pros and cons","game engine features","2D game development","3D game development","game development tips","game design","game programming","game publishing"],"authors":["joanna"]},"nextItem":{"title":"Godot and C#: A Viable Unity Alternative","permalink":"/blog/godot-unity-alternative"}},"content":"<FancyImage src={require(\\"./header.jpg\\").default} alt=\\"Godot allows you to use two incredible languages to build games, right out of the box. But how do you know which one to use?\\" />\\n\\nAlmost every day, someone asks \\"Should I use GDScript or C# to make my Godot game?\\"\\n\\nA lot of amazing advice has been given out on the Godot Reddit, the forums, various Discord servers, and just about anywhere people are talking about Godot \u2014 so let\'s write it up, once and for all!\\n\\n\x3c!-- truncate --\x3e\\n\\nIn this article, we\u2019ll take a deep dive into the advantages and disadvantages of GDScript and C# in Godot 4.x, as well as tips on how to choose one \u2014 or use them both!\\n\\n:::info\\nIn case you don\'t have time to read all this, here\'s why you might pick GDScript:\\n\\n- \u2705 You\'re new to coding or you\'re a casual hobbyist.\\n- \u2705 You\'re an expert who doesn\'t mind dynamic types.\\n- \u2705 You want seamless engine integration and native extension support.\\n- \u2705 Performance isn\'t a major concern (it usually isn\'t for game scripts).\\n- \u2705 No fighting with tooling. Write your code inside the engine itself!\\n\\nOn the other hand, here\'s some reasons why you might choose C#:\\n\\n- \u2705 You have experience with managed languages such as Java, Go, or Dart.\\n- \u2705 You already know C#, perhaps from using Unity previously or writing enterprise applications.\\n- \u2705 You prefer static typing.\\n- \u2705 You prefer curly braces over whitespace-delimited syntax.\\n- \u2705 You need access to mature developer tooling: linting, custom analyzers, and source generation.\\n- \u2705 You want additional performance without resorting to a systems language.\\n- \u2705 You need access to the vast library of .NET packages.\\n- \u26a0\ufe0f You don\'t need to export to iOS or web \u2014\xa0yet. [While C# Android export is being tested][csharp-android-export] in the latest releases, support for exporting to iOS and web are still planned for future releases. You can [track the progress here][csharp-mobile].\\n- \u274c You don\'t need to integrate with any GDExtensions. Currently, Godot does not generate C# bindings for GDExtensions, meaning you cannot call a GDExtension from C#. You can work around this by calling into GDScript from C# if you are willing to incur the performance penalty.\\n\\n:::\\n\\n## \ud83e\udd16 GDScript\\n\\nAs you likely know, Godot provides its own high-level, dynamically typed programming language called GDScript. While GDScript often gets compared to Python, I find the syntax to be even friendlier, with [optional type hints][gdscript-type-hints] that are also reminiscent of TypeScript or Swift.\\n\\n<FancyImage src={require(\\"./gdscript.jpg\\").default} alt=\\"GDScript code inside the Godot Engine editor.\\">\\nThe Godot Engine will provide this script as a starting point for all <code>CharacterBody3D</code> nodes.\\n</FancyImage>\\n\\nFor quick prototypes and experiments, I will often just throw together a quick script using GDScript (or hack away on someone else\'s) until I get what I want. In almost every case, it is simply easier and faster to use GDScript.\\n\\nIf you happen to be handy with C++ or Rust, you can create a [GDExtension][gdextension] for just about anything you can\'t do in GDScript (or that would be too slow to do in GDScript). Godot will generate bindings for extensions, allowing you to call your extension code from GDScript with no additional work. Pretty magical!\\n\\nTo sweeten the deal further, [Godot 4 has drastically improved GDScript][gdscript-whats-new]: it\'s [considerably faster][gdscript-performance], can [handle circular/cyclic dependencies][gdscript-cyclic-dependencies], and supports [lambda functions][gdscript-lambdas]. On top of all that, just about every tutorial or video you watch regarding Godot uses GDScript.\\n\\nIf you\'re not sold yet, there probably isn\'t anything else I can say to get you to use it.\\n\\n### \u2600\ufe0f GDScript Pros\\n\\n- \ud83d\ude80 Incredibly easy to learn and well supported.\\n- \ud83e\udd1d Many large, friendly communities that provide hands-on support.\\n- \ud83d\udcda Tons of tutorials and videos.\\n- \ud83e\udd73 Supports every platform Godot supports.\\n- \u2728 Always up-to-date with the latest Godot features.\\n- \ud83d\udd0c Perfect native extension integration.\\n- \ud83e\ude9b Tooling support \u2014 you can write GDScript directly inside the Godot Engine\'s editor, or use the [official VSCode extension][gdscript-vscode]. You can even get a [VSCode extension for formatting][gdscript-formatter] your GDScript files, too.\\n\\n### \ud83c\udf27 GDScript Cons\\n\\nSo what\'s the catch with GDScript? Not much, really, but I\'ll list a few considerations to be aware of here:\\n\\n- \ud83d\udca8 Not necessarily as performant as C#. There is a performance penalty when calling into the Godot engine from C# due to marshalling, but C# itself tends to execute considerably faster than GDScript.\\n- \ud83d\udd12 Any code written in GDScript is completely specific to the Godot engine. This is usually not a problem for game scripts (since they are not very portable by nature), but it\'s worth mentioning.\\n- \u2b1c\ufe0f Whitespace-delimited syntax. If you can\'t stand Python or just strongly prefer curly braces, no amount of GDScript will ever soothe your soul. Likewise, if you love whitespace-delimited syntax, you\'ll feel right at home.\\n- \u26a1\ufe0f Not statically typed. While you can specify type hints to help with error-checking, they are optional at best. For some, this is an advantage. For others, the lack of enforced static typing presents a headache.\\n\\nFor the majority of game developers I\'ve spoken to, none of those are typically deal-breakers. GDScript has a cult following for a reason: it\'s _really_, _really_ great. Now that you know its strengths and weaknesses, you can feel confident choosing it.\\n\\nStill not convinced? Let\'s talk about C#.\\n\\n## #\ufe0f\u20e3 C\\\\#\\n\\nWhile not as popular as GDScript, [C# support in Godot has come a long ways][csharp-whats-new]. Out of the approximately 5,000 surveyed users, [only about 13%][godot-2022-poll] said they were using C# to build Godot games.\\n\\n<FancyImage src={require(\\"./csharp.jpg\\").default} alt=\\"C# script for a Godot node.\\">\\nC# code for an editor tool that helps visualize a <code>RayCast3D</code>.\\n</FancyImage>\\n\\n### \ud83c\udf27 C# Cons\\n\\nBefore we get too far, it\'s worth reiterating a couple of points:\\n\\n- \u274c Godot can\'t export C# games for iOS or web.\\n- \u274c You cannot call GDExtensions directly from C#.\\n\\nIf either of those are an immediate must-have for your project, you should **not** use C#. Unless you are optimistic and believe those shortcomings will be addressed by the time your project requires them, you should use GDScript or a third party language integration instead.\\n\\n:::info\\nC# is incredibly powerful and allows you to tap into the massive .NET ecosystem of packages and tools, but it comes at a cost. If you\'re up for an adventure, don\'t mind a challenge, and can live with the drawbacks mentioned above, C# might be an excellent fit for your project.\\n:::\\n\\n### \u2600\ufe0f C# Pros\\n\\nBecause C# is a general-purpose programming language that first appeared 23 years ago, it is hard to fully extol its virtues. In the interest of time, I\'ll list a few positives within the context of Godot game development:\\n\\n- \ud83d\ude80 C# is a well-established language with the full weight of Microsoft behind it. If you\'ve ever used Java or Dart, you\'ll also feel right at home.\\n- \ud83d\udee0 Incredible tooling support. Want to create a custom analyzer with an automatic fix? A source generator? A template project? You can do that.\\n- \ud83e\uddd1\u200d\ud83d\udcbb Choice of IDE\'s: You can use [Visual Studio][vs], [JetBrains Rider][rider], or [Visual Studio Code][vscode].\\n- \ud83d\udce6 The entire .NET package ecosystem. If there\'s a nuget package that solves your problem, you can probably use it.\\n- \ud83e\udd1d There\'s an extremely helpful C# channel in the official [Godot Discord][godot-discord].\\n- \ud83d\udc24 We have a Chickensoft Discord server dedicated to supporting the Godot C# community. If you run into questions or just want to talk, feel free to stop by and say hello!\\n\\n<BlogDiscordInvite />\\n\\n### \ud83c\udf9f Free Stuff\\n\\nWhile there aren\'t many Godot addons created with C#, [Chickensoft] provides a number of well-tested packages to help you get started. Each project began as a piece of my own personal game project before being broken into separate packages to share with the community. Each project is fully tested and has 100% code coverage (for my own peace of mind).\\n\\nWant to quickly create a Godot game with basic CI/CD and unit testing already setup? Use our [`dotnet new` template][godot-game] for creating a game. We have [a package template][godot-package] for creating nuget packages for use with Godot, too.\\n\\nNeed to inject code into lifecycle methods in your scripts automatically? We have a [source generator][super-nodes] for that. How about automatic, [node-based dependency injection][auto-inject]?\\n\\nWe even have our own command line tool, [Chicken][chicken], that will automatically manage Godot addons for your project based on an `addons.json` file and let you symlink addons locally while they\'re in development. No more git submodules for addons!\\n\\n<FancyImage src={require(\\"./packages.jpg\\").default} alt=\\"Chickensoft\'s package offerings\\">\\nChickensoft\'s package offerings as of April 2023.\\n</FancyImage>\\n\\nIf you\'d like to use Godot from a GitHub actions workflow, you can use [setup-godot] to run Godot directly on a macOS, Windows, or Linux runner.\\n\\nWe also have packages for [running tests inside Godot][go-dot-test], creating basic [state machines][go-dot-net] in C#, [logging][go-dot-log], and a handful of other things.\\n\\n:::tip\\nChickensoft is an open source organization \u2014 all of our offerings are _free_. We welcome contributions and feedback from the community!\\n:::\\n\\n## \ud83d\ude05 Afraid of Commitment?\\n\\nSince you can mix and match C# and GDScript in the same project, you only have to choose which language you want to use for the _majority_ of your project.\\n\\n:::tip\\nSince most of the existing Godot addons are written with GDScript, it\'s unlikely you\'d need to call into C# from GDScript if you picked GDScript for your scripting language.\\n:::\\n\\nIf you happened to have chosen C# as your primary scripting language, you may need to be able to call into GDScript occasionally from C# since it is impractical to rewrite every addon you might need in C#. While this probably isn\'t as efficient as keeping everything in one language, it can really help in a pinch.\\n\\nSo, if you hate committing to a single language, why not have both[^1]? The Godot documentation discusses [how to bridge between C# and GDScript][cross-lang-scripting].\\n\\n## \ud83c\udf81 Wrapping Up\\n\\nEven though Chickensoft is dedicated to the C# Godot community, C# isn\'t necessarily the correct choice for every Godot game. For most people, GDScript is probably the best choice.\\n\\nI like to think that if you need (or want) to use C#, you already know that deep down inside.\\n\\nUltimately, if you decide to embark on an adventure and use C# for your next Godot game, we\'re happy to lend a hand and cheer you on in the [Chickensoft Discord][discord]. Either way, we wish you the best of luck and we hope to hear from you! \ud83d\ude00\\n\\n:::info\\nIf you\'re interested in what I\'m up to, you are more than welcome to [follow me on Mastodon][mastodon] or [reach out to me on Discord][discord-personal].\\n:::\\n\\n[^1]: Practically speaking, there are very good reasons to keep the majority of your codebase in a single language: consistency, ease of refactoring, lowering the barrier to ramp up contributors, etc.\\n\\n[gdscript-lambdas]: https://docs.godotengine.org/en/stable/tutorials/scripting/gdscript/gdscript_basics.html#lambda-functions\\n[gdextension]: https://docs.godotengine.org/en/stable/tutorials/scripting/gdextension/what_is_gdextension.html\\n[csharp-mobile]: https://github.com/godotengine/godot/issues/68153#issuecomment-1299672279\\n[gdscript-type-hints]: https://godotengine.org/article/gdscript-progress-report-feature-complete-40/#typed-arrays\\n[gdscript-whats-new]: https://gdscript.com/articles/godot-4-gdscript/\\n[gdscript-performance]: https://godotengine.org/article/gdscript-progress-report-typed-instructions/#how-faster-is-it\\n[gdscript-cyclic-dependencies]: https://godotengine.org/article/dev-snapshot-godot-4-0-beta-6/\\n[gdscript-vscode]: https://marketplace.visualstudio.com/items?itemName=geequlim.godot-tools\\n[gdscript-formatter]: https://marketplace.visualstudio.com/items?itemName=Razoric.gdscript-toolkit-formatter\\n[godot-2022-poll]: https://docs.google.com/forms/d/e/1FAIpQLSe-OIpxXqou9cDnPXEAjxzpICbf8_YZB3jUizdECXRydtB8cA/viewanalytics\\n[csharp-whats-new]: https://godotengine.org/article/whats-new-in-csharp-for-godot-4-0/\\n[godot-discord]: https://discord.gg/4JBkykG\\n[discord]: https://discord.gg/gSjaPgMmYW\\n[Chickensoft]: /\\n[godot-game]: https://github.com/chickensoft-games/GodotGame\\n[godot-package]: https://github.com/chickensoft-games/GodotPackage\\n[super-nodes]: https://github.com/chickensoft-games/SuperNodes\\n[auto-inject]: https://github.com/chickensoft-games/AutoInject\\n[setup-godot]: https://github.com/chickensoft-games/setup-godot\\n[go-dot-test]: https://github.com/chickensoft-games/GoDotTest\\n[go-dot-net]: https://github.com/chickensoft-games/GoDotNet\\n[go-dot-log]: https://github.com/chickensoft-games/GoDotLog\\n[Chicken]: https://github.com/chickensoft-games/Chicken\\n[mastodon]: https://mastodon.online/@jolexxa\\n[discord-personal]: https://discordapp.com/users/jolexxa#4292\\n[vs]: https://visualstudio.microsoft.com/\\n[rider]: https://www.jetbrains.com/rider/\\n[vscode]: https://code.visualstudio.com/\\n[cross-lang-scripting]: https://docs.godotengine.org/en/stable/tutorials/scripting/cross_language_scripting.html\\n[csharp-android-export]: https://godotengine.org/article/dev-snapshot-godot-4-2-dev-3/"},{"id":"godot-unity-alternative","metadata":{"permalink":"/blog/godot-unity-alternative","source":"@site/blog/2022-11-27-godot-unity-alternative/index.md","title":"Godot and C#: A Viable Unity Alternative","description":"Godot had a really good year. So did C# support.","date":"2022-11-27T00:00:00.000Z","formattedDate":"November 27, 2022","tags":[],"readingTime":11.94,"hasTruncateMarker":true,"authors":[{"name":"Joanna","title":"Founder @ Chickensoft","url":"/authors/joanna","imageURL":"/img/authors/joanna.jpg","key":"joanna"}],"frontMatter":{"title":"Godot and C#: A Viable Unity Alternative","description":"Godot had a really good year. So did C# support.","image":"./header.jpg","slug":"godot-unity-alternative","keywords":["indie","csharp","godot","2022"],"authors":["joanna"]},"prevItem":{"title":"GDScript vs C# in Godot 4","permalink":"/blog/gdscript-vs-csharp"},"nextItem":{"title":"It\u2019s time to make that indie C# game in Godot.","permalink":"/blog/indie-game-godot"}},"content":"<FancyImage src={require(\\"./header.jpg\\").default} alt=\\"SatiRogue by @lewiji on GitHub\\">\\n<a href=\\"https://github.com/lewiji/SatiRogue\\">SatiRogue</a> by <a href=\\"https://twitter.com/TetrisMcKenna\\">@TetrisMcKenna</a>\\n</FancyImage>\\n\\nGodot is a viable alternative to Unity \u2014 not just for early adopters, but for game developers and artists across the entire skill spectrum.\\n\\n\x3c!-- truncate --\x3e\\n\\nThe engine provides a significantly better development experience (via text-based resources) and a snappy, responsive user interface. We\'ll spend the rest of the blog defending that statement and addressing common concerns about Godot.\\n\\nOver the last few months, I\'ve heard dozens of questions from interested users about Godot, the C# support it provides, and the future of the engine. It\'s important to note that I am in no way officially affiliated with the Godot Engine organization. I have, however, spoken with some of the core engine developers and contributors and **I\'d like to put the arguments against Godot and C# to rest, once and for all.**\\n\\nThere\'s a lot to cover, and it\'s all good news \u2014 so let\'s dive in!\\n\\n> Unrelated: this blog has officially moved away from Medium![^1]\\n\\n## \ud83c\udf87 Godot\'s Big Year\\n\\nIf you haven\'t been watching too closely, you might have missed some of the news! Godot 4 is now in beta, and it\'s shipping some impressive new features:\\n\\n- Vulkan renderer\\n- Signed distance, field-based global illumination (SDFGI) for large open worlds\\n- GPU lightmapping\\n- Custom sky shaders\\n- Automatically generated LOD (level-of-detail) meshes\\n- .NET 6 support\\n- Revamped shader language\\n- Circular dependencies support for GDScript\\n- ...[and countless other changes][godot4beta]\\n\\n<FancyImage src={require(\\"./aniela.jpg\\").default} alt=\\"Aniela \u2014 a lighting study made in Godot by @cybereality on Twitter\\">\\n<a href=\\"https://cybereality.itch.io/aniela\\">Aniela \u2014 a lighting study made in Godot</a> by <a href=\\"https://twitter.com/cybereality\\">@cybereality</a> demonstrating Godot 4\'s new SDFGI features.\\n</FancyImage>\\n\\nTo top it all off, C# support has been completely overhauled by migrating away from mono and integrating support for .NET 6 directly. We\'ll come back to that in a bit.\\n\\n### Overwhelming Support\\n\\nGodot continues to receive an overwhelming amount of support from the community. The creator of Godot, [Juan Linietsky][juan], describes how Godot suffers from the best possible problem:\\n\\n> we have too many people who are doing things really really efficiently and really well.\\"[^2]\\n\\nEssentially, the sheer number of contributors (1,800+ on GitHub) almost guarantees that any specific feature is being worked on at any given moment.\\n\\nOn [Patreon][patreon], Godot now receives over **`$15,000 USD`** of donations _per month_. That\'s an increase of `$2,000 USD` per month since I last checked on it in the summer.\\n\\nThe Godot subreddit, [r/godot], now has over **101,000 members**, an **increase of at least 5,000 users** since the summer (probably in large part to [Unity\'s missteps][unity-problems]). The official [Godot Discord][godot-discord] now has over **50,000 users**.\\n\\n## \ud83d\udc81\u200d\u2640\ufe0f Addressing Your Concerns\\n\\nOn Reddit (and occasionally elsewhere), interested users will ask if C# is \\"ready\\" or a \\"first-class\\" citizen in Godot. The answer is simple: **yes**.\\n\\nIf you don\'t believe me, read on. We\'ll respond to each of the common arguments against Godot and its support for C#.\\n\\n### Where\'s the asset store?\\n\\nWhen I tell people that Godot is a viable Unity alternative, this is usually the first counterargument I hear, and for good reason. Godot doesn\'t have a monetization system for assets..._yet_.\\n\\nOf course, Godot does have an official [Asset Library][asset-library] with over 1,500 assets, but they\'re all free. \ud83d\ude41\\n\\nMost of us would normally be thrilled about free assets, but when you\'re an artist or developer who relies on selling your assets to support yourself, giving away your products is a no-go. It\'s only fair that you should be able to make a living doing what you\'re good at.\\n\\nMonetization, as [someone pointed out on Reddit][reddit-asset-store-comment], requires a lot of bureaucratic effort. Collecting payments and being responsible for payment handling is a gigantic chore.\\n\\nIn 2021, the founder of Godot \u2014\xa0Juan Linietsky \u2014\xa0[confirmed a paid asset marketplace was on the way][godot-paid-assets].\\n\\nThe Godot team recently announced the formation of the non-profit [Godot Foundation][godot-foundation], citing a paid asset marketplace as one of the primary motivations:\\n\\n> As Godot keeps growing, so do our needs. Godot\'s size merits the flexibility of having its own organization and the opportunity to explore broader funding sources.\\n>\\n> Examples of this are crowdfunding campaigns (like Blender or Krita do), the highly requested ability for users to sell assets on an asset library (and have a share going to the Godot Foundation), selling merchandise, and other types of funding.\\n\\nWhile that doesn\'t solve the problem today, you can probably get pretty far with the 1,500+ free assets that already exist.\\n\\nFor some users, having access to a multitude of assets is non-negotiable. Those users will not use Godot until its asset library is a thriving, paid marketplace. For most developers, however, I believe the boost in developer productivity Godot provides over Unity _et al._ more than makes up for any reduction in assets.\\n\\nFor example: if you\'re creating your own art, or purchasing art and models from artists, you\'re probably writing all your own custom code anyways. Why not do it in Godot? The editor won\'t [hang for 2 minutes straight][unity-painful] whenever it decides to scan your assets, unlike in other engines, _cough cough_.\\n\\n### What About C#?\\n\\nPeople often ask \\"is C# a first class citizen?\\" when looking into Godot and C#. I believe the question became popular when Godot first introduced C#. Like all new features, C# support was initially incomplete and poorly documented, but solidified over time. These days, the [Godot Docs][godot-docs] provide almost every code example in both C# and GDScript, and C# support in Godot 3 (LTS) is incredibly robust.\\n\\nIf you are looking for C# API docs, [paulloz] maintains a [C# version of the Godot API docs][csharp-godot-docs].\\n\\nJust to reiterate, **Godot supports two first-party programming languages: GDScript and C#**. All other language bindings are unofficial, third party projects.\\n\\nWhen asked if the new `GDExtension` support in Godot would replace the need for first-party C# support, [neikeq] (one of the core Godot C# contributors), explained that C# support would continue to be built-in because it would be difficult (if even possible) [to load more than one .NET assembly through a native extension][native-extension].\\n\\n#### Future of C# Support\\n\\nI asked [neikeq] a couple of questions about C# in Godot via private message in Discord, and with their permission I am posting some of the interview here (lightly edited for clarity):\\n\\n> **me**: A lot of people are on the fence about Godot because they\'re not sure C# support is planned long term, or maybe they\'ve been burned by the lack of documentation in the past. What do you want them to know?\\n>\\n> **neikeq**:\\n> They shouldn\'t worry about C# support in the long term. There was a lot of concern about that this year because initially C# wasn\'t included with the Godot 4 alpha releases, but now it\'s already there and soon it will be unified as a single version of Godot.\\n>\\n> One of the most important factors for the future of C# support is that starting with Godot 4, it\'s much easier to maintain. There is still room for improvement (for example, changing/adding a type for marshalling takes a bit more work right now). But the amount of work we took off our shoulders is huge. That\'s time that can be spent on other parts like addressing issues.\\n>\\n> Hopefully there will be less confusion about some things as well. Previous marshalling errors that would be printed at runtime are now compiler errors.\\n>\\n> **me**: Is the maintenance effort easier because of the new source generators, or other changes that were made?\\n>\\n> **neikeq**: We no longer build the Mono runtime ourselves, which was especially painful on platforms like wasm, iOS and even Android sometimes. As well as having to maintain build code for some of those platforms and ensuring that it works (like AOT for iOS). That\'s all offloaded to MSBuild with the official .NET releases. Granted we don\'t have mobile and wasm support yet but when the time comes, it will be easier to implement. The new hosting + pure C# + source generators is also easier to maintain than our previous approach with the Mono embedding APIs (although marshalling needs to be improved in this regard as I mentioned).\\n>\\n> **me**: Any closing words to those who were worried C# support was going away?\\n>\\n> **neikeq**: **_We don\'t have any intention of removing C# support because a lot of people in the industry communicate to us that C# support is a big factor in adopting the engine._**\\n\\n### A Bigger C# Ecosystem\\n\\nStill skeptical about taking the plunge on an open source game engine? Allow me to sweeten the deal by showcasing some awesome C# projects.\\n\\nOur feature image for this article is from [SatiRogue][satirogue], a \\"turn-based dungeon-crawler rogue-like RPG, made with Godot 3.x C# + RelEcs\\" by [TetrisMcKenna][tetrismckenna]. The source code is freely available on GitHub under the MIT license.\\n\\n<FancyImage src={require(\\"./satirogue.jpg\\").default} alt=\\"SatiRogue\\">\\n</FancyImage>\\n\\n<Spacer><GithubCard profile=\'lewiji\' repo=\'SatiRogue\' /></Spacer>\\n\\nHere\'s a few other awesome projects written in C#:\\n\\n<Spacer><GithubCard profile=\'Carnagion\' repo=\'GDSerializer\' /></Spacer>\\n<Spacer><GithubCard profile=\'derkork\' repo=\'godot-test-driver\' /></Spacer>\\n<Spacer><GithubCard profile=\'Byteron\' repo=\'RelEcsGodot\' /></Spacer>\\n\\n## \ud83d\udc24 Free Stuff from Chickensoft\\n\\nChickensoft had a good first year: what originally started as a C#-focused fan club for Godot has blossomed into a small community of enthusiastic package authors and game developers. Our community members have helped answer technical questions about Godot and C#, shared a number of open source packages, and filed multiple bug reports on the Godot engine (some of which have already been fixed!).\\n\\n### Ready for Godot 4\\n\\nI\'m pleased to announce that **all of the Chickensoft packages have been officially updated for Godot 4!**\\n\\nBy adding a few nuget `<PackageReference>` tags to your `.csproj` file, you can get [node-based dependency provisioning][go_dot_dep], [logging][go_dot_log], [automated testing][go_dot_test], and [state machines][go_dot_net] up and running with Godot 4, for free!\\n\\n> All of the Chickensoft packages were dogfooded, meaning I built them because I was trying to solve the same problems every time I created a new game project. I never did finish a game, but at least I have some tools. Maybe next time...\\n\\n### Announcing Chicken\\n\\n[Chicken][chicken] is a command line tool to help manage Godot addons and quickly create new Godot projects from a template.\\n\\n<FancyImage src=\'/img/chickensoft/chicken_cli.svg\' alt=\\"Chicken CLI\\" widthOverride=\\"200px\\" />\\n\\n<Spacer><GithubCard profile=\'chickensoft-games\' repo=\'Chicken\' logo=\'/img/chickensoft/chicken.svg\'/></Spacer>\\n\\nWhile learning Godot, I kept running into the same few headaches over and over. When trying to make my code reusable across game projects, I realized there was no easy way to keep my addons up to date while I was still developing them. Likewise, whenever I created a new sandbox project, I had to copy a dozen or so files into the new project every time.\\n\\nChicken\'s addon management system allows you to declare dependencies in their own file (to prevent versioning headaches with git submodules), while template generation enables you to quickly create new projects without having to copy over all the files you need each time.\\n\\n#### Addon Management, Simplified\\n\\nGodot addons are simply git repositories with an `addons/your_addon_name` folder inside them. The contents of that folder (scenes, scripts, art assets, etc) will be copied to a project folder\'s `addons/your_addon_name` when a user installs your addon. Because addons are a flat folder structure, people often think to use git submodules for addons in their project repositories. I initially tried git submodules and found it was too difficult to keep everything up-to-date across all of my projects that were using the addons.\\n\\n:::info\\nWhen using C# with Godot, you have two mechanisms for reusing code: addons and nuget packages.\\n\\nImporting nuget packages is as simple as adding them to your Godot project\'s `.csproj` file. Unfortunately, you can\'t really import scenes or other assets from nuget packages. They\'re only good for reusing code.\\n\\nAddons, on the other hand, allow you to reuse _anything_.\\n:::\\n\\nIf git submodules also sound too painful to you, Chicken allows you to declare what addons your project needs in an `addons.json` file so it can install them for you.\\n\\nChicken also lets you install addons by copying or symlinking to local folders.\\n\\n```js\\n{\\n  \\"path\\": \\"addons\\",\\n  \\"cache\\": \\".addons\\",\\n  \\"addons\\": {\\n    \\"godot_dialogue_manager\\": {\\n      \\"url\\": \\"https://github.com/nathanhoad/godot_dialogue_manager\\",\\n      \\"source\\": \\"remote\\",\\n      \\"checkout\\": \\"main\\",\\n      \\"subfolder\\": \\"addons/dialogue_manager\\"\\n    },\\n    \\"my_local_addon_repo\\": {\\n      \\"url\\": \\"../my_addons/my_local_addon_repo\\",\\n      \\"source\\": \\"local\\"\\n    },\\n    \\"my_symlinked_addon\\": {\\n      \\"url\\": \\"/drive/path/to/addon\\",\\n      \\"source\\": \\"symlink\\"\\n    }\\n  }\\n}\\n```\\n\\nThen, all you have to do is run the following:\\n\\n```sh\\nchicken addons install\\n```\\n\\n## \ud83c\udfac Conclusion\\n\\nThe Godot ecosystem provides an [asset library][asset-library], [monthly game jams][game-jams], and numerous [developer communities][communities]. If you\'re using C# with Godot, you can use just about anything on [nuget] in your project, unlocking the entire C# ecosystem _in addition to everything Godot has to offer_. Whether you\'re still planning your project or putting the finishing touches on it, there\'s an entire ecosystem in place to support you. Godot apps can be released on every major platform, and multiple companies can provide support for developers who wish to publish their games [on consoles][consoles].\\n\\nMaking Godot games with C# is an incredible experience, and it\'s only getting better. If you\'re looking to start (or continue) your game development journey, you are more than welcome to be a part of our open source community here at Chickensoft.\\n\\n> If you\'re already making games with Godot and C# and want your project featured in a blog, let\'s get in touch!\\n\\n<BlogDiscordInvite />\\n\\n### Footnotes\\n\\n[^1]: Hosting the blog on a website instead of on Medium allows me to integrate custom widgets: it\'s a big win all around. If you like this website, [feel free to fork it][chickensoft-website]. Besides, hacker news readers (who have been the most engaged audience so far) tend to dislike Medium because of the reading limit. If you\'re reading this from hacker news (or anywhere else), welcome!\\n[^2]: Tune into around 00:48:00 of [The Role of Open Source Game Engines: Godot and O3DE][open-metaverse] on the Podcast [Building the Open Metaverse][open-metaverse-podcast]\\n\\n\x3c!-- Links --\x3e\\n\\n[asset-library]: https://godotengine.org/asset-library/asset\\n[game-jams]: https://godotwildjam.com\\n[communities]: https://godotengine.org/community/user-groups\\n[nuget]: https://www.nuget.org\\n[consoles]: https://godotengine.org/article/godot-consoles-all-you-need-know\\n[godot4beta]: https://godotengine.org/article/dev-snapshot-godot-4-0-beta-1#rendering\\n[open-metaverse]: https://uk-podcasts.co.uk/podcast/building-the-open-metaverse/the-role-of-open-source-game-engines-godot-and-o3d\\n[open-metaverse-podcast]: https://cesium.com/open-metaverse-podcast/\\n[juan]: https://twitter.com/reduzio\\n[patreon]: https://www.patreon.com/godotengine/posts\\n[r/godot]: https://www.reddit.com/r/godot/\\n[unity-problems]: /blog/indie-game-godot#unrest-in-the-indie-c-game-dev-world\\n[godot-discord]: https://discord.gg/4JBkykG\\n[reddit-asset-store-comment]: https://www.reddit.com/r/godot/comments/o5pam9/comment/h2o1u5w/?utm_source=share&utm_medium=web2x&context=3\\n[godot-foundation]: https://godotengine.org/article/godots-graduation-godot-moves-to-a-new-foundation\\n[unity-painful]: https://www.youtube.com/watch?v=7PpkAhVZMDc\\n[godot-docs]: https://docs.godotengine.org/en/stable/index.html\\n[paulloz]: https://twitter.com/pauljoannon\\n[csharp-godot-docs]: https://paulloz.github.io/godot-csharp-api/\\n[neikeq]: https://github.com/neikeq\\n[native-extension]: https://discord.com/channels/862108653488963604/1039016978528088074/1039212956438773843\\n[satirogue]: https://github.com/lewiji/SatiRogue\\n[tetrismckenna]: https://twitter.com/TetrisMcKenna\\n[chicken]: https://github.com/chickensoft-games/chicken\\n[chickensoft-website]: https://github.com/chickensoft-games/chickensoft_site\\n[go_dot_dep]: https://github.com/chickensoft-games/go_dot_dep\\n[go_dot_log]: https://github.com/chickensoft-games/go_dot_log\\n[go_dot_test]: https://github.com/chickensoft-games/go_dot_test\\n[go_dot_net]: https://github.com/chickensoft-games/go_dot_net\\n[godot-paid-assets]: https://twitter.com/reduzio/status/1395380550983196673"},{"id":"indie-game-godot","metadata":{"permalink":"/blog/indie-game-godot","source":"@site/blog/2022-07-03-indie-game-godot/index.md","title":"It\u2019s time to make that indie C# game in Godot.","description":"Wondering if you should take the plunge and use Godot with C#? Read this!","date":"2022-07-03T00:00:00.000Z","formattedDate":"July 3, 2022","tags":[],"readingTime":12.56,"hasTruncateMarker":true,"authors":[{"name":"Joanna","title":"Founder @ Chickensoft","url":"/authors/joanna","imageURL":"/img/authors/joanna.jpg","key":"joanna"}],"frontMatter":{"title":"It\u2019s time to make that indie C# game in Godot.","description":"Wondering if you should take the plunge and use Godot with C#? Read this!","image":"./header.jpg","slug":"indie-game-godot","keywords":["indie","csharp","godot","2022"],"authors":["joanna"]},"prevItem":{"title":"Godot and C#: A Viable Unity Alternative","permalink":"/blog/godot-unity-alternative"}},"content":"import BlogDiscordInvite from \'@site/src/components/blog_discord_invite/blog_discord_invite\';\\nimport FancyImage from \'@site/src/components/fancy_image/fancy_image\';\\n\\n<FancyImage src={require(\\"./header.jpg\\").default} alt=\\"Godot\'s Third Person Shooter Demo\\">\\n<a href=\\"https://github.com/godotengine/tps-demo\\">Third Person Shooter Demo</a> by the <a href=\\"https://godotengine.org\\">Godot Engine</a>\\n</FancyImage>\\n\\nYou\'ve always dreamed of making that C# game, but engines have always made it too difficult \u2014 until now.\\n\\n\x3c!--truncate--\x3e\\n\\n## Unrest in the indie C# game dev world\\n\\nFor some time, C# has been a popular choice for game developers, originally gaining popularity with Microsoft\u2019s XNA framework before being further popularized by tools like Monogame, Unity, and Godot.\\n\\nUnity, often considered the de facto engine of choice for C# game development, has been in the news a lot lately for [laying off a chunk of its workforce][unity-layoffs], [threatening to remove its forums][unity-forums], [shedding $5 billion in market cap][unity-market-cap], and [merging with a known adware company][unity-adware], IronSource. [Reddit comments][unity-reddit] are full of loyal Unity users starting to question if Unity has forgotten them, with comments ranging from \\"maybe I should learn Unreal\u2026\\" to \\"this is why you don\u2019t go public.\\"\\n\\nJust to be clear, I don\u2019t take pleasure in being critical of Unity, and I think it\u2019s a shame all those Unity employees are losing their jobs. At first glance, Unity is so laughably ahead of Godot in sheer number of features supported that it seems comical to compare the two. One is an industry behemoth and the world\u2019s most popular game engine, while the other is a free, 30 megabyte program developed by passionate developers in their free time.\\n\\nUnity can _technically_ do much more than Godot, at least on paper. In practice, Unity requires 3rd party tools for tweens, timers, and networking, all of which Godot includes out-of-the-box. Still, I\u2019d argue that _it doesn\u2019t actually matter_ for the vast majority of us indie game developers. The rest of this blog only exists to convince you of that argument.\\n\\nDo you want to make the world\u2019s best-looking game with the latest, buggy technologies, or do you want to _actually have fun_ making games? If you said yes to the last part of that question, I\u2019d like to invite you to try [Godot][godot]. If you\u2019ve already tried Godot a while back and gave up, I\u2019d like to ask you to give Godot another chance. It might be better now than you realize.\\n\\n## Unity isn\u2019t fun anymore\\n\\nIt\u2019s no secret that [Unity is painful to use][unity-painful]: it\u2019s slow to open, and it often pauses to re-scan the entire project while you\u2019re trying to work. If you\u2019re trying to use source control with a few other people, you have to work even harder to get everything to play nice with Unity\u2019s unique file formats. By modern standards, Unity development can feel a bit backwards at times.\\n\\nWhen you open Godot, it opens almost instantaneously. The UI is just the right size, and all of the controls are easily accessible in a few simple panes you can rearrange to your liking.\\n\\nIn Godot, everything is composed of nodes. No prefabs, game components, or other abstractions to learn. Just nodes. A scene is just a tree of nodes, saved as a plain text file in a familiar configuration format that you can easily read in a text editor. Need to quickly edit a scene to fix a reference to a file that was renamed or moved outside of Godot? Just open it up in your code editor and fix the path. When you switch back to the Godot editor, it will reload the project before you can blink. There\u2019s no difficulty with source control, either: everything just works because everything\u2019s text.\\n\\nGodot also gives you full control of your `.csproj` file, allowing you to setup dependencies and configure MSBuild as much as you want. Want to use code generators? You can do that. Custom Roslyn analyzers? Go for it. Your own nuget packages? Check.\\n\\n## It\'s actually fun to use Godot\\n\\nGodot doesn\u2019t fight you when you\u2019re building scenes. Making a scene feels a lot like creating a class using [composition], and scenes can even [inherit] from other scenes (using another scene as the the root node of a scene allows you to inherit from it and override its properties in the editor and in code), allowing you to express patterns you\u2019re intimately familiar with from object-oriented programming.\\n\\nWasn\u2019t \\"having fun\\" the whole point of making a game in C#, anyways? Using a managed language was supposed to make creating games easier, not harder. _Don\u2019t worry about all the bits and bytes, C# will take care of it for you._ Sadly, we lost that along the way when for-profit game engine companies decided to prioritize the monetization of their tools over the happiness of their users. It isn\u2019t that way with Godot: making C# games is fun again.\\n\\n## But what about Unity\'s asset store?\\n\\n\\"Alright, I want to switch to Godot,\\" you say, \\"but I need those high quality paid assets from the Unity Asset Store since I\u2019m not an artist/musician/expert coder/etc.\\"\\n\\nUnfortunately, the paid asset store is the biggest sacrifice you\u2019ll have to make. While it can\u2019t always compare to Unity\u2019s paid offerings, the [Godot Asset Library][godot-asset-library] offers 1300+ creations _for free_. Have you seen [all of the awesome stuff][awesome-godot] people have made in Godot?\\n\\n> It\u2019s possible that [donations or payments will be coming to the Godot Asset Library][godot-paid], allowing creators to be rewarded for their work, but I haven\u2019t heard anything conclusive just yet. If it does, expect a lot more high-quality assets in the near future.\\n\\nMost people would probably agree that being retired with a terrible disease that affects your quality of life is a lot worse than being retired in good health. So why would you keep using a game engine that\u2019s making you miserable? Making games is supposed to be _fun_!\\n\\nIf it\u2019s just the Unity Asset Store holding you back, there\u2019s probably nothing I can say to convince you to give Godot a chance. But if you\u2019re resourceful and don\u2019t mind a little extra work, and/or you\u2019re willing to port your scripts over and import your 3D models into Godot, you might be pleasantly surprised by what you\u2019re missing.\\n\\n## You\u2019re the star of the show\\n\\nGodot prioritizes developer experience. I don\u2019t think that\u2019s explicitly written in the docs, and I\u2019ve never heard anyone else say it, but that\u2019s how I feel when I use Godot. Sure, it has fewer features than the dominating game engines, but the \u201cfew\u201d features it does have are so polished and well thought-out that it\u2019s a joy to use. When I use Godot, I feel special. Godot\u2019s docs are thorough, well-written, and explanatory. If you\u2019re really stuck, you can look through it\u2019s source code (I\u2019ve actually done that a few times and figured things out). Everything just works (generally), right out of the box!\\n\\nDid you know that killer features like Godot 4\u2019s `NavigationServer` (with local object avoidance) [are now available][godot-now-avail] as of 3.5? You can even compute navigation meshes at runtime. The Godot developers prove their commitment to you by back-porting some of the most valuable features that were developed for 4.0. They\u2019re doing that because _you \u2014 the game developer_ \u2014 are the focal point of their universe.\\n\\nThe Godot team is not seeking commercial success. It\u2019s the same strategy that worked for Blender: make the best possible program _for the people_. They couldn\u2019t make it any clearer: the Godot team wants you to have a good time making games!\\n\\n## \\"I\u2019ll wait until the next version.\\"\\n\\nA lot of people are holding out for Godot 4.0. Either they\u2019re procrastinating, or they sincerely believe Godot can\u2019t do what they want it to do. That might be true for a big team making the next big thing, but for most of us indie devs \u2014 really? You can\u2019t start work on _anything_ yet just because Godot doesn\u2019t have LOD? I have a hard time believing that.\\n\\nLong-time Unity users probably know the feeling of waking up to find out that a feature they really enjoyed (or relied on) was getting axed because Unity wanted to monetize something differently instead of _just making the developers happy._\\n\\nChances are, by the time you succeed in pushing the limits of Godot, a new version will have been released that can do even more.\\n\\nWe\u2019re not waiting on Godot anymore, and neither should you. It\u2019s time for you to be happy.\\n\\n## C# in Godot: where we\u2019re at in 2022\\n\\nC# support in Godot has come a long ways since it was first introduced years ago. Godot allows you to use C# 10, which makes for an incredible developer experience (Unity doesn\u2019t even fully support C# 9).\\n\\nWhile the C# Godot community is fairly small (about [14% of the approximately 5,000][csharp-users] users who responded to the Godot Community Poll 2022 are using C#), we\u2019ve been able to create [addon managers][addons], [test frameworks][test-frameworks], [serializers], [mod loaders][mod-loaders], [logging], [node-based dependency managers][node-dep], [Steam integrations][steam], and so much more.\\n\\nOn Reddit, [r/Godot][r-godot] has 90,000+ members. The [official discord][official-discord] has well over 45,000. With thousands more joining all the time, you\u2019d be in good company. [Tons of games on Steam][steam-games] are released using Godot. [On Patreon][patreon], Godot is bringing in over $15,000 a month.\\n\\n## C# in Godot\\n\\nSetting up a complex Godot project with C# can be a bit tricky, especially if you\u2019re not familiar with the strange hell that is MSBuild. In spite of it all, the community has helped me accomplish everything I\u2019ve ever wanted to do.\\n\\n> I\u2019ve spent a lot of time documenting how to setup C# projects in Godot, especially since a lot of the people wanting to use C# with Godot are fairly new to it. If you want some examples and documentation for how to setup and structure your project, I highly encourage you to check out some of the GitHub repositories for my organization, [Chickensoft][chickensoft]. Or you can pop into our [Discord][discord] server and we\u2019ll be happy to help!\\n\\n### But what about testing?\\n\\nIf you\u2019re a test-driven development occultist (or just enthusiastic about testing), you might be wondering how to write tests for your C# Godot game. For a while, that was very difficult, unless you were using XUnit with [Rider][rider] (which has its own challenges).\\n\\nTesting is no longer difficult to setup. There are multiple libraries for writing tests for C# Godot code, including Chickensoft\'s official [test framework, go_dot_test][test-frameworks] that lets you debug tests from VSCode, collect coverage, and run tests from the command line.\\n\\n### What\u2019s missing in the Godot C# ecosystem?\\n\\nWhile Godot\u2019s C# support is truly incredible, the ecosystem is fairly light on utilities, particularly networking frameworks and deep editor integrations for C#. There\u2019s also no single, direct equivalent to tools like [Odin][odin] for Unity. If you\u2019re up for the challenge of being an early adopter and lie awake at night thinking about open source software, you could be the one to create the next big, useful tool for the Godot C# world.\\n\\nWhile Godot has incredible, easy-to-use RPC networking support built into the current 3.x versions, it doesn\u2019t have the ability to swap out transports to use something like Steamworks or other messaging protocols under the hood, at least from what I understand. [That might be coming in 4.0][swap-transports].\\n\\nEven so, we\'re currently building our own networking library in C# for Godot, loosely inspired by [Mirror] and [Netcode for GameObjects][netcode-for-game-objects] that circumvents Godot\u2019s networking entirely, for those who might want a more custom approach to networking or need to support certain transports. I\u2019ll take all the help I can get, too, because I am way out of my depth on this one!\\n\\n### What else should I know about C# in Godot?\\n\\nLike other engines, Godot marshals types back and forth between its C++ and C# layers. Not all types can convert into one of Godot\u2019s types, but it isn\u2019t as big of a problem as you might think. For most game logic, you can create classes, records, and structs the way you normally would, and everything will work fine in the C# layer.\\n\\nIf you need to pass a type to a Godot subsystem, or to a node that\u2019s using GDScript, you\u2019ll want to make sure any custom objects involved are C# classes that extend `Godot.Object` (or `Godot.Reference`), since that\u2019s the only way Godot can serialize and track values correctly (the c++ layer uses reference counting, not garbage collection). You can also use C#\u2019s events, which are strongly typed, but if you need to interface with node events, you should use Godot\u2019s signal system. In general, I tend to prefer vanilla C# features over Godot types to avoid marshaling penalties and to leverage C#\u2019s strong typing. When I need to interface with Godot nodes, GDScript, or anything that expects Godot types, I adopt Godot\u2019s way of doing things. So far, that has worked out really well for me, and I think it will for you, too.\\n\\n### What about asynchrony?\\n\\nUsing `async` and `await` with C#\u2019s Task can be a bit of a headache with Godot, especially if you don\u2019t realize that that most ways of executing an async Task in C# starts a new thread (or recycles one from the task thread pool). In general, I recommend avoiding asynchrony where possible, unless you have a good way of keeping it self-contained and use it only where absolutely necessary, such as for loading systems or in integration tests (where you need to `await` across frames). If you can\u2019t escape asynchrony, you can always use C# events to interface with the rest of your synchronous code to keep things simple.\\n\\n### C# constructors and Godot\\n\\nBecause of the way Godot spins up classes, you should avoid creating values in your Godot Node\u2019s constructor and instead initialize values when Godot calls your node\u2019s `_Ready` method. If you try to do it too early, you introduce a lot of instability in your game. Since C# doesn\u2019t have a `late` modifier (Dart) or `lazy` (Kotlin), you can simply initialize values to `null` (or `null!` if you\u2019re using null-aware code) and finish initializing your fields in `_Ready`.\\n\\nI know that\u2019s a little technical, but knowing those few things should save you a few headaches. It certainly would have helped us!\\n\\n## Open source always wins\\n\\nGodot may not ever be the dominating game engine, but we believe an open source game engine will dominate the field someday, given enough time. Godot prioritizes developers, and when developers win, everyone else eventually wins, too.\\n\\nSo what are you waiting on? It\u2019s certainly not Godot. Make that indie C# game you\u2019ve been dreaming about! We\u2019ll always be in [Discord][discord] to help! Visit [Chickensoft][chickensoft] on Github!\\n\\n<BlogDiscordInvite />\\n\\n\x3c!-- Links --\x3e\\n\\n[discord]: https://discord.gg/MjA6HUzzAE\\n[unity-layoffs]: https://www.techspot.com/news/95143-unity-laying-off-hundreds-employees-shares-continue-slide.html\\n[unity-forums]: https://forum.unity.com/threads/unity-answers-shutdown-canceled.1293360/\\n[unity-market-cap]: https://www.marketwatch.com/story/unity-software-loses-5-billion-in-market-cap-after-apples-changes-lead-to-self-inflicted-wound-11652291876\\n[unity-adware]: https://news.ycombinator.com/item?id=32081051\\n[unity-reddit]: https://www.reddit.com/r/Unity3D/comments/vp1kv7/unity_employees_mad_and_stressed_out_amidst/\\n[godot]: https://godotengine.org/\\n[unity-painful]: https://www.youtube.com/watch?v=7PpkAhVZMDc\\n[composition]: https://en.wikipedia.org/wiki/Object_composition\\n[inherit]: https://github.com/godotengine/godot-docs/issues/5529\\n[godot-asset-library]: https://godotengine.org/asset-library/asset\\n[awesome-godot]: https://github.com/godotengine/awesome-godot\\n[godot-paid]: https://github.com/godotengine/godot-asset-library/issues/126\\n[godot-now-avail]: https://godotengine.org/article/release-candidate-godot-3-5-rc-5\\n[csharp-users]: https://docs.google.com/forms/d/e/1FAIpQLSe-OIpxXqou9cDnPXEAjxzpICbf8_YZB3jUizdECXRydtB8cA/viewanalytics\\n[addons]: https://github.com/chickensoft-games/chicken\\n[test-frameworks]: https://github.com/chickensoft-games/go_dot_test\\n[serializers]: https://github.com/Carnagion/GDSerializer\\n[mod-loaders]: https://github.com/Carnagion/Modot\\n[logging]: https://github.com/chickensoft-games/go_dot_log\\n[node-dep]: https://github.com/chickensoft-games/go_dot_net\\n[steam]: https://github.com/chickensoft-games/GameTemplate\\n[r-godot]: https://www.reddit.com/r/godot/\\n[official-discord]: https://discord.gg/4JBkykG\\n[steam-games]: https://godotes.com/q1-2022/\\n[patreon]: https://www.patreon.com/godotengine/posts\\n[chickensoft]: https://github.com/chickensoft-games\\n[rider]: https://www.jetbrains.com/rider/\\n[odin]: https://assetstore.unity.com/packages/tools/utilities/odin-inspector-and-serializer-89041\\n[swap-transports]: https://godotengine.org/article/multiplayer-changes-godot-4-0-report-3\\n[mirror]: https://github.com/vis2k/Mirror\\n[netcode-for-game-objects]: https://github.com/Unity-Technologies/com.unity.netcode.gameobjects"}]}')}}]);