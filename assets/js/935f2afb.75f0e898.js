"use strict";(self.webpackChunkchickensoft_site=self.webpackChunkchickensoft_site||[]).push([[53],{1109:e=>{e.exports=JSON.parse('{"pluginId":"default","version":"current","label":"Next","banner":null,"badge":false,"noIndex":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"tutorialSidebar":[{"type":"link","label":"\ud83d\udc23 Chickensoft","href":"/docs/","docId":"index"},{"type":"link","label":"\ud83c\udfc1 Godot C# Setup Guide","href":"/docs/setup","docId":"setup"},{"type":"link","label":"#\ufe0f\u20e3 How C# Works in Godot","href":"/docs/how_csharp_works_in_godot/","docId":"how_csharp_works_in_godot/how_csharp_works_in_godot"},{"type":"category","label":"\ud83d\udca1 LogicBlocks","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"\ud83e\udd28 Why Logic Blocks?","href":"/docs/logic_blocks/why","docId":"logic_blocks/why"},{"type":"link","label":"\ud83d\udce6 Installation","href":"/docs/logic_blocks/installation","docId":"logic_blocks/installation"},{"type":"link","label":"\ud83d\ude80 Quick Start","href":"/docs/logic_blocks/quick_start","docId":"logic_blocks/quick_start"},{"type":"category","label":"\ud83e\uddee Basics","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"\ud83d\udce5 Inputs","href":"/docs/logic_blocks/basics/inputs","docId":"logic_blocks/basics/inputs"},{"type":"link","label":"\ud83d\udd04 States","href":"/docs/logic_blocks/basics/states","docId":"logic_blocks/basics/states"},{"type":"link","label":"\ud83d\udce4 Outputs","href":"/docs/logic_blocks/basics/outputs","docId":"logic_blocks/basics/outputs"},{"type":"link","label":"\u274c Errors","href":"/docs/logic_blocks/basics/errors","docId":"logic_blocks/basics/errors"},{"type":"link","label":"\ud83e\udea2 Bindings","href":"/docs/logic_blocks/basics/bindings","docId":"logic_blocks/basics/bindings"}],"href":"/docs/logic_blocks/basics/"},{"type":"category","label":"\u23f2\ufe0f Timer Tutorial","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"\ud83e\uddca Timer Logic Block","href":"/docs/logic_blocks/tutorial/timer_logic_block","docId":"logic_blocks/tutorial/timer_logic_block"},{"type":"link","label":"\ud83d\udd06 Power","href":"/docs/logic_blocks/tutorial/power","docId":"logic_blocks/tutorial/power"},{"type":"link","label":"\u23f3 Countdown","href":"/docs/logic_blocks/tutorial/coundown","docId":"logic_blocks/tutorial/coundown"},{"type":"link","label":"\u23f0 Beeping","href":"/docs/logic_blocks/tutorial/beeping","docId":"logic_blocks/tutorial/beeping"}],"href":"/docs/logic_blocks/tutorial/"},{"type":"category","label":"\ud83e\uddea Testing","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"\ud83d\udca1 Testing Logic Blocks","href":"/docs/logic_blocks/testing/testing_logic_blocks","docId":"logic_blocks/testing/testing_logic_blocks"},{"type":"link","label":"\ud83d\udd04 Testing States","href":"/docs/logic_blocks/testing/testing_states","docId":"logic_blocks/testing/testing_states"},{"type":"link","label":"\ud83e\udea2 Testing Bindings","href":"/docs/logic_blocks/testing/testing_bindings","docId":"logic_blocks/testing/testing_bindings"}],"href":"/docs/logic_blocks/testing/"},{"type":"link","label":"\ud83d\udcbe Serialization","href":"/docs/logic_blocks/serialization","docId":"logic_blocks/serialization"},{"type":"link","label":"\ud83e\ude84 Tips and Tricks","href":"/docs/logic_blocks/tips_and_tricks","docId":"logic_blocks/tips_and_tricks"}],"href":"/docs/logic_blocks/"},{"type":"category","label":"\ud83d\udd2e SuperNodes","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"\ud83d\udce6 Installation","href":"/docs/super_nodes/installation","docId":"super_nodes/installation"},{"type":"link","label":"\ud83e\udd16 Source Generators","href":"/docs/super_nodes/source_generators","docId":"super_nodes/source_generators"},{"type":"link","label":"\ud83d\udd75\ufe0f Static Reflection","href":"/docs/super_nodes/static_reflection","docId":"super_nodes/static_reflection"},{"type":"link","label":"\ud83d\udd04 Lifecycle Handlers","href":"/docs/super_nodes/lifecycle-handlers","docId":"super_nodes/lifecycle_handlers"},{"type":"category","label":"\ud83e\uddec Advanced Usage","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"\ud83d\udd0b PowerUps & Interfaces","href":"/docs/super_nodes/advanced_usage/implementing_interfaces","docId":"super_nodes/advanced_usage/implementing_interfaces"},{"type":"link","label":"\ud83e\udeab Generic PowerUps","href":"/docs/super_nodes/advanced_usage/generic_power_ups","docId":"super_nodes/advanced_usage/generic_power_ups"},{"type":"link","label":"\u267b\ufe0f Sharing PowerUps","href":"/docs/super_nodes/advanced_usage/sharing_power_ups","docId":"super_nodes/advanced_usage/sharing_power_ups"},{"type":"link","label":"\ud83d\udd2c Advanced Static Reflection","href":"/docs/super_nodes/advanced_usage/advanced_static_reflection","docId":"super_nodes/advanced_usage/advanced_static_reflection"}],"href":"/docs/super_nodes/advanced_usage/"}],"href":"/docs/super_nodes/"}]},"docs":{"how_csharp_works_in_godot/how_csharp_works_in_godot":{"id":"how_csharp_works_in_godot/how_csharp_works_in_godot","title":"#\ufe0f\u20e3 How C# Works in Godot","description":"Understanding how C# is integrated into Godot can provide valuable context that makes it easier to design, understand, and debug games and applications built with Godot.","sidebar":"tutorialSidebar"},"index":{"id":"index","title":"\ud83d\udc23 Chickensoft","description":"Chickensoft is an open source organization for tools and templates that help the C# Godot community.","sidebar":"tutorialSidebar"},"logic_blocks/basics/bindings":{"id":"logic_blocks/basics/bindings","title":"\ud83e\udea2 Bindings","description":"LogicBlocks provides a binding system that allows objects to listen to a particular logic block. Bindings allow you to observe inputs, outputs, errors, and state changes declaratively.","sidebar":"tutorialSidebar"},"logic_blocks/basics/errors":{"id":"logic_blocks/basics/errors","title":"\u274c Errors","description":"Logic blocks are designed to be error-tolerant by default to reduce crashes in production. When an error occurs in an input handler, the logic block catches it internally to avoid halting execution.","sidebar":"tutorialSidebar"},"logic_blocks/basics/index":{"id":"logic_blocks/basics/index","title":"\ud83e\uddee Basics","description":"Before diving into more code examples, it can be helpful to understand the theory behind a logic block. Logic blocks are inspired by statecharts, so if you haven\'t already read about them on [statecharts.dev], it\'s well worth your time to do so.","sidebar":"tutorialSidebar"},"logic_blocks/basics/inputs":{"id":"logic_blocks/basics/inputs","title":"\ud83d\udce5 Inputs","description":"Inputs are temporary, disposable objects that contain relevant information about the input.","sidebar":"tutorialSidebar"},"logic_blocks/basics/outputs":{"id":"logic_blocks/basics/outputs","title":"\ud83d\udce4 Outputs","description":"Outputs are temporary, disposable objects that are produced by a state and immediately passed to each of the logic block\'s listeners and bindings.","sidebar":"tutorialSidebar"},"logic_blocks/basics/states":{"id":"logic_blocks/basics/states","title":"\ud83d\udd04 States","description":"State refers to the value maintained by a logic block.","sidebar":"tutorialSidebar"},"logic_blocks/index":{"id":"logic_blocks/index","title":"\ud83d\udca1 LogicBlocks","description":"Chickensoft Badge Discord Read the docs line coverage branch coverage","sidebar":"tutorialSidebar"},"logic_blocks/installation":{"id":"logic_blocks/installation","title":"\ud83d\udce6 Installation","description":"\ud83d\udce5 Installing LogicBlocks","sidebar":"tutorialSidebar"},"logic_blocks/quick_start":{"id":"logic_blocks/quick_start","title":"\ud83d\ude80 Quick Start","description":"\ud83d\udca1 Creating a Logic Block","sidebar":"tutorialSidebar"},"logic_blocks/serialization":{"id":"logic_blocks/serialization","title":"\ud83d\udcbe Serialization","description":"LogicBlocks can be serialized by using the Chickensoft [Introspection] and [Serialization] packages together.","sidebar":"tutorialSidebar"},"logic_blocks/testing/index":{"id":"logic_blocks/testing/index","title":"\ud83e\uddea Testing","description":"LogicBlocks was designed with testability in mind. States can be fully tested independently of the logic block they are used with.","sidebar":"tutorialSidebar"},"logic_blocks/testing/testing_bindings":{"id":"logic_blocks/testing/testing_bindings","title":"\ud83e\udea2 Testing Bindings","description":"LogicBlocks allows you to create a fake binding for testing purposes.","sidebar":"tutorialSidebar"},"logic_blocks/testing/testing_logic_blocks":{"id":"logic_blocks/testing/testing_logic_blocks","title":"\ud83d\udca1 Testing Logic Blocks","description":"LogicBlocks are mockable and testable.","sidebar":"tutorialSidebar"},"logic_blocks/testing/testing_states":{"id":"logic_blocks/testing/testing_states","title":"\ud83d\udd04 Testing States","description":"Logic block states can easily be unit tested by themselves. To understand how to test a state, you need to know a little bit about its underlying context.","sidebar":"tutorialSidebar"},"logic_blocks/tips_and_tricks":{"id":"logic_blocks/tips_and_tricks","title":"\ud83e\ude84 Tips and Tricks","description":"Additional functionality and troubleshooting tips for LogicBlocks are described here.","sidebar":"tutorialSidebar"},"logic_blocks/tutorial/beeping":{"id":"logic_blocks/tutorial/beeping","title":"\u23f0 Beeping","description":"It\'s finally time to make the last (and best) part of our timer: the beeping state!","sidebar":"tutorialSidebar"},"logic_blocks/tutorial/coundown":{"id":"logic_blocks/tutorial/coundown","title":"\u23f3 Countdown","description":"Now that our timer can be turned on, off, and set to a given duration, it\'s time to make it actually work.","sidebar":"tutorialSidebar"},"logic_blocks/tutorial/index":{"id":"logic_blocks/tutorial/index","title":"\u23f2\ufe0f Timer Tutorial","description":"In this tutorial, we\'ll use LogicBlocks to create a hierarchical state machine that represents a simple kitchen timer. When we\'re finished, we\'ll have code for a state machine that produces the following diagram.","sidebar":"tutorialSidebar"},"logic_blocks/tutorial/power":{"id":"logic_blocks/tutorial/power","title":"\ud83d\udd06 Power","description":"We know we\'ll need a PoweredOn state, too. Whenever the user presses the power button, we should toggle between off and on.","sidebar":"tutorialSidebar"},"logic_blocks/tutorial/timer_logic_block":{"id":"logic_blocks/tutorial/timer_logic_block","title":"\ud83e\uddca Timer Logic Block","description":"To start off the tutorial, we\'ll start by making sure we have the right dependencies and then setup an empty logic block.","sidebar":"tutorialSidebar"},"logic_blocks/why":{"id":"logic_blocks/why","title":"\ud83e\udd28 Why Logic Blocks?","description":"This article explains why you might want to use LogicBlocks to manage state in your game or application.","sidebar":"tutorialSidebar"},"setup":{"id":"setup","title":"\ud83c\udfc1 Godot C# Setup Guide","description":"If you have the .NET SDK installed, Godot 4 provides a pretty good out-of-the-box development experience \u2014 but you\'ll need to follow some additional steps if you want to configure your environment to simplify IDE integration and command-line usage.","sidebar":"tutorialSidebar"},"super_nodes/advanced_usage/advanced_static_reflection":{"id":"super_nodes/advanced_usage/advanced_static_reflection","title":"\ud83d\udd2c Advanced Static Reflection","description":"SuperNodes can do some cool coding tricks. If you want to learn how to use them, you\'ve come to the right place!","sidebar":"tutorialSidebar"},"super_nodes/advanced_usage/generic_power_ups":{"id":"super_nodes/advanced_usage/generic_power_ups","title":"\ud83e\udeab Generic PowerUps","description":"PowerUps support generic type parameters. Using PowerUps as generic mixins can allow you to implement patterns that would otherwise be difficult, painful, or impossible to implement without expensive runtime reflection.","sidebar":"tutorialSidebar"},"super_nodes/advanced_usage/implementing_interfaces":{"id":"super_nodes/advanced_usage/implementing_interfaces","title":"\ud83d\udd0b PowerUps & Interfaces","description":"PowerUps can implement interfaces on behalf of a SuperNode.","sidebar":"tutorialSidebar"},"super_nodes/advanced_usage/index":{"id":"super_nodes/advanced_usage/index","title":"\ud83e\uddec Advanced Usage","description":"In the first section, we explained the basics of PowerUps and how to apply them to SuperNodes.","sidebar":"tutorialSidebar"},"super_nodes/advanced_usage/sharing_power_ups":{"id":"super_nodes/advanced_usage/sharing_power_ups","title":"\u267b\ufe0f Sharing PowerUps","description":"To share a PowerUp, we need to be able to share the code for it, not a compiled .dll of its contents. If we aren\'t able to share the source code for a PowerUp, the SuperNodes generator can\'t apply it to a SuperNode.","sidebar":"tutorialSidebar"},"super_nodes/index":{"id":"super_nodes/index","title":"\ud83d\udd2e SuperNodes","description":"[SuperNodes] is a C# source generator that gives superpowers to Godot node scripts.","sidebar":"tutorialSidebar"},"super_nodes/installation":{"id":"super_nodes/installation","title":"\ud83d\udce6 Installation","description":"Simply add the following package references to your project\'s .csproj file (you can find the latest version on Nuget). Don\'t forget to include the PrivateAssets=\\"all\\" and OutputItemType=\\"analyzer\\" attributes on the SuperNodes package reference!","sidebar":"tutorialSidebar"},"super_nodes/lifecycle_handlers":{"id":"super_nodes/lifecycle_handlers","title":"\ud83d\udd04 Lifecycle Handlers","description":"SuperNodes allows you to implement methods that correspond to Godot node and object notifications, such as OnReady for NotificationReady, or OnProcess in place of NotificationProcess.","sidebar":"tutorialSidebar"},"super_nodes/source_generators":{"id":"super_nodes/source_generators","title":"\ud83e\udd16 Source Generators","description":"\ud83d\udd04 Lifecycle Hooks","sidebar":"tutorialSidebar"},"super_nodes/static_reflection":{"id":"super_nodes/static_reflection","title":"\ud83d\udd75\ufe0f Static Reflection","description":"At compile-time, SuperNodes will generate information about the properties and fields in a SuperNode script, as well as any properties or fields that have been added by PowerUps. These \\"static reflection\\" tables can be read by the SuperNode (or even an external assembly), allowing you to inspect the structure of a SuperNode at runtime without using expensive C# reflection calls!","sidebar":"tutorialSidebar"}}}')}}]);