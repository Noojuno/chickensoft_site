"use strict";(self.webpackChunkchickensoft_site=self.webpackChunkchickensoft_site||[]).push([[4065],{3905:(e,t,a)=>{a.d(t,{Zo:()=>p,kt:()=>g});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var c=n.createContext({}),l=function(e){var t=n.useContext(c),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},p=function(e){var t=l(e.components);return n.createElement(c.Provider,{value:t},e.children)},h={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,c=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),m=l(a),g=r,d=m["".concat(c,".").concat(g)]||m[g]||h[g]||i;return a?n.createElement(d,o(o({ref:t},p),{},{components:a})):n.createElement(d,o({ref:t},p))}));function g(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,o=new Array(i);o[0]=m;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:r,o[1]=s;for(var l=2;l<i;l++)o[l]=a[l];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},9277:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>g,frontMatter:()=>i,metadata:()=>s,toc:()=>l});var n=a(7462),r=(a(7294),a(3905));const i={title:"\ud83d\udca1 LogicBlocks",image:"./header.jpg",sidebar_position:3},o=void 0,s={unversionedId:"logic_blocks/index",id:"logic_blocks/index",title:"\ud83d\udca1 LogicBlocks",description:"Chickensoft Badge Discord Read the docs line coverage branch coverage",source:"@site/docs/logic_blocks/index.md",sourceDirName:"logic_blocks",slug:"/logic_blocks/",permalink:"/docs/logic_blocks/",draft:!1,editUrl:"https://github.com/chickensoft-games/chickensoft_site/tree/main/docs/logic_blocks/index.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{title:"\ud83d\udca1 LogicBlocks",image:"./header.jpg",sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"\ud83c\udfc1 Godot C# Setup Guide",permalink:"/docs/setup"},next:{title:"\ud83e\udd28 Why Logic Blocks?",permalink:"/docs/logic_blocks/why"}},c={image:a(1266).Z},l=[{value:"\ud83d\udcda What to Read Next",id:"-what-to-read-next",level:2},{value:"\ud83d\udca1 Example",id:"-example",level:2},{value:"\ud83d\uddbc\ufe0f Visualizing Logic Blocks",id:"\ufe0f-visualizing-logic-blocks",level:2},{value:"\ud83e\udd2b Differences from Statecharts",id:"-differences-from-statecharts",level:2}],p=(h="FancyImage",function(e){return console.warn("Component "+h+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",e)});var h;const m={toc:l};function g(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},m,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/"},(0,r.kt)("img",{parentName:"a",src:"https://raw.githubusercontent.com/chickensoft-games/chickensoft_site/main/static/img/badges/chickensoft_badge.svg",alt:"Chickensoft Badge"}))," ",(0,r.kt)("a",{parentName:"p",href:"https://discord.gg/gSjaPgMmYW"},(0,r.kt)("img",{parentName:"a",src:"https://raw.githubusercontent.com/chickensoft-games/chickensoft_site/main/static/img/badges/discord_badge.svg",alt:"Discord"}))," ",(0,r.kt)("a",{parentName:"p",href:"./"},(0,r.kt)("img",{parentName:"a",src:"https://raw.githubusercontent.com/chickensoft-games/chickensoft_site/main/static/img/badges/read_the_docs_badge.svg",alt:"Read the docs"}))," ",(0,r.kt)("img",{parentName:"p",src:"https://raw.githubusercontent.com/chickensoft-games/LogicBlocks/main/Chickensoft.LogicBlocks.Tests/badges/line_coverage.svg",alt:"line coverage"})," ",(0,r.kt)("img",{parentName:"p",src:"https://raw.githubusercontent.com/chickensoft-games/LogicBlocks/main/Chickensoft.LogicBlocks.Tests/badges/branch_coverage.svg",alt:"branch coverage"})),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/chickensoft-games/LogicBlocks"},"LogicBlocks")," is a serializable, hierarchical state machine package for C# that works well when targeting ahead-of-time (AOT) environments. LogicBlocks draws inspiration from ",(0,r.kt)("a",{parentName:"p",href:"https://statecharts.dev/"},"statecharts"),", ",(0,r.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Finite-state_machine"},"state machines"),", and ",(0,r.kt)("a",{parentName:"p",href:"https://www.flutteris.com/blog/en/reactive-programming-streams-bloc"},"blocs"),"."),(0,r.kt)("p",null,"Instead of elaborate transition tables, states are simply defined as self-contained class records that read like ordinary code using the ",(0,r.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/State_pattern"},"state pattern"),". Logic blocks are designed with performance, adaptability, and error tolerance in mind, making them refactor-friendly and suitable for high performance scenarios (such as games)."),(0,r.kt)("p",null,"Logic blocks grow with your code: you can start with a simple state machine and easily scale it into a nested, hierarchical statechart that represents a more complex system \u2014 even while you're working out what the system should be."),(0,r.kt)("hr",null),(0,r.kt)(p,{alt:"",src:"/img/chickensoft/logic_blocks.png",widthOverride:"200px",mdxType:"FancyImage"}),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"-what-to-read-next"},"\ud83d\udcda What to Read Next"),(0,r.kt)("p",null,"Logic blocks are based on ",(0,r.kt)("em",{parentName:"p"},"statecharts"),". You may also know them as hierarchical state machines (HSM's)."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"\ud83d\udfe2 ",(0,r.kt)("a",{parentName:"p",href:"https://xstate.js.org/docs/guides/introduction-to-state-machines-and-statecharts/"},"Introduction to State Machines and Statecharts")),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Beginner"),": overview for those who are new to statecharts.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"\ud83d\udfe1 ",(0,r.kt)("a",{parentName:"p",href:"https://statecharts.dev/"},"Statecharts.dev")),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Intermediate"),": all the statechart concepts in one place.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"\ud83d\udd34 ",(0,r.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/UML_state_machine"},"UML State Machine (Wikipedia)")),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Expert"),": all the juicy technical details are here.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"\ud83d\udd35 ",(0,r.kt)("a",{parentName:"p",href:"./tutorial/"},"Logic Blocks Timer Tutorial")),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"In a hurry?")," Learn about hierarchical states and logic blocks all at once!"))),(0,r.kt)("h2",{id:"-example"},"\ud83d\udca1 Example"),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"A logic block is a class that ",(0,r.kt)("strong",{parentName:"em"},"receives inputs"),", ",(0,r.kt)("strong",{parentName:"em"},"maintains a single state instance"),", and ",(0,r.kt)("strong",{parentName:"em"},"produces outputs"),".")),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"Logic blocks enable you to efficiently model complex behaviors"),(0,r.kt)("sup",{parentName:"p",id:"fnref-1"},(0,r.kt)("a",{parentName:"sup",href:"#fn-1",className:"footnote-ref"},"1")),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"using Chickensoft.Introspection;\n\n[Meta, LogicBlock(typeof(State), Diagram = true)]\npublic class LightSwitch : LogicBlock<LightSwitch.State> {\n  public override Transition GetInitialState() => To<State.PoweredOff>();\n\n  public static class Input {\n    public readonly record struct Toggle;\n  }\n\n  public abstract record State : StateLogic<State> {\n    public record PoweredOn : State, IGet<Input.Toggle> {\n      public Transition On(in Input.Toggle input) => To<PoweredOff>();\n    }\n\n    public record PoweredOff : State, IGet<Input.Toggle> {\n      public Transition On(in Input.Toggle input) => To<PoweredOn>();\n    }\n  }\n\n  public static class Output {\n    public readonly record struct StatusChanged(bool IsOn);\n  }\n}\n")),(0,r.kt)("h2",{id:"\ufe0f-visualizing-logic-blocks"},"\ud83d\uddbc\ufe0f Visualizing Logic Blocks"),(0,r.kt)("p",null,"LogicBlocks provides a source generator that can generate ",(0,r.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/UML_state_machine"},"UML state diagrams")," of your code."),(0,r.kt)("mermaid",{value:'stateDiagram-v2\n\nstate "LightSwitch State" as Chickensoft_LogicBlocks_DiagramGenerator_Tests_TestCases_LightSwitch_State {\n  state "PoweredOn" as Chickensoft_LogicBlocks_DiagramGenerator_Tests_TestCases_LightSwitch_State_PoweredOn\n  state "PoweredOff" as Chickensoft_LogicBlocks_DiagramGenerator_Tests_TestCases_LightSwitch_State_PoweredOff\n}\n\nChickensoft_LogicBlocks_DiagramGenerator_Tests_TestCases_LightSwitch_State_PoweredOff --\x3e Chickensoft_LogicBlocks_DiagramGenerator_Tests_TestCases_LightSwitch_State_PoweredOn : Toggle\nChickensoft_LogicBlocks_DiagramGenerator_Tests_TestCases_LightSwitch_State_PoweredOn --\x3e Chickensoft_LogicBlocks_DiagramGenerator_Tests_TestCases_LightSwitch_State_PoweredOff : Toggle\n\nChickensoft_LogicBlocks_DiagramGenerator_Tests_TestCases_LightSwitch_State_PoweredOff : OnEnter \u2192 StatusChanged\nChickensoft_LogicBlocks_DiagramGenerator_Tests_TestCases_LightSwitch_State_PoweredOn : OnEnter \u2192 StatusChanged\n\n[*] --\x3e Chickensoft_LogicBlocks_DiagramGenerator_Tests_TestCases_LightSwitch_State_PoweredOff'}),(0,r.kt)("p",null,"Generated UML diagrams are placed alongside the code for your logic block with the ",(0,r.kt)("inlineCode",{parentName:"p"},"*.g.puml")," extension. You can use ",(0,r.kt)("a",{parentName:"p",href:"https://plantuml.com/"},"PlantUML")," (and/or the ",(0,r.kt)("a",{parentName:"p",href:"https://marketplace.visualstudio.com/items?itemName=jebbs.plantuml"},"PlantUML VSCode Extension"),") to visualize the generated diagram code."),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"A diagram explains all of the high level behavior of a state machine in a single picture. Without a diagram, you would have to read and scroll through all the relevant code files to understand the machine (especially if you weren't the author, or forgot how it worked since you had written it).")),(0,r.kt)("h2",{id:"-differences-from-statecharts"},"\ud83e\udd2b Differences from Statecharts"),(0,r.kt)("p",null,"In the interest of convenience, logic blocks have a few subtle differences from statecharts:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"\ud83d\udc82\u200d\u2640\ufe0f No explicit guards"),(0,r.kt)("p",{parentName:"li"},"Use conditional logic in an input handler")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"\ud83e\udea2 Attach/Detach callbacks"),(0,r.kt)("p",{parentName:"li"},"These are an implementation specific detail that are called whenever the state ",(0,r.kt)("em",{parentName:"p"},"instance")," changes, as opposed to only being called when the state type hierarchy (i.e., state configuration) changes.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"\ud83d\udd70\ufe0f No event deferral"),(0,r.kt)("p",{parentName:"li"},"Non-handled inputs are simply discarded. There's nothing to stop you from implementing ",(0,r.kt)("a",{parentName:"p",href:"https://supersmashbros.fandom.com/wiki/Input_Buffering"},"input buffering")," on your own, though: you may even use the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/chickensoft-games/Collections?tab=readme-ov-file#boxless-queue"},"boxless queue")," collection that LogicBlocks uses internally."))),(0,r.kt)("p",null,"LogicBlocks also uses different terms for some of the statechart concepts to make them more intuitive or disambiguate them from other C# terminology."),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"statecharts"),(0,r.kt)("th",{parentName:"tr",align:null},"logic blocks"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"internal transition"),(0,r.kt)("td",{parentName:"tr",align:null},"self transition")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"event"),(0,r.kt)("td",{parentName:"tr",align:null},"input")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"action"),(0,r.kt)("td",{parentName:"tr",align:null},"output")))),(0,r.kt)("div",{className:"footnotes"},(0,r.kt)("hr",{parentName:"div"}),(0,r.kt)("ol",{parentName:"div"},(0,r.kt)("li",{parentName:"ol",id:"fn-1"},"Simple behaviors, like the light switch example, are considerably more verbose than they need to be. Logic blocks shine brightest when they're used for things that actually require hierarchical state machines.",(0,r.kt)("a",{parentName:"li",href:"#fnref-1",className:"footnote-backref"},"\u21a9")))))}g.isMDXComponent=!0},1266:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/header-3b16a21d739396967ca870ae00925c8e.jpg"}}]);