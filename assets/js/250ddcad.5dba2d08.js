"use strict";(self.webpackChunkchickensoft_site=self.webpackChunkchickensoft_site||[]).push([[848],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>g});var r=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function p(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var s=r.createContext({}),l=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},u=function(e){var n=l(e.components);return r.createElement(s.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,a=e.originalType,s=e.parentName,u=p(e,["components","mdxType","originalType","parentName"]),d=l(t),g=i,m=d["".concat(s,".").concat(g)]||d[g]||c[g]||a;return t?r.createElement(m,o(o({ref:n},u),{},{components:t})):r.createElement(m,o({ref:n},u))}));function g(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var a=t.length,o=new Array(a);o[0]=d;var p={};for(var s in n)hasOwnProperty.call(n,s)&&(p[s]=n[s]);p.originalType=e,p.mdxType="string"==typeof e?e:i,o[1]=p;for(var l=2;l<a;l++)o[l]=t[l];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},1608:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>o,default:()=>g,frontMatter:()=>a,metadata:()=>p,toc:()=>l});var r=t(7462),i=(t(7294),t(3905));const a={title:"\ud83e\udeab Generic PowerUps",image:"../header.jpg"},o=void 0,p={unversionedId:"super_nodes/advanced_usage/generic_power_ups",id:"super_nodes/advanced_usage/generic_power_ups",title:"\ud83e\udeab Generic PowerUps",description:"PowerUps support generic type parameters. Using PowerUps as generic mixins can allow you to implement patterns that would otherwise be difficult, painful, or impossible to implement without expensive runtime reflection.",source:"@site/docs/super_nodes/advanced_usage/02_generic_power_ups.md",sourceDirName:"super_nodes/advanced_usage",slug:"/super_nodes/advanced_usage/generic_power_ups",permalink:"/docs/super_nodes/advanced_usage/generic_power_ups",draft:!1,editUrl:"https://github.com/chickensoft-games/chickensoft_site/tree/main/docs/super_nodes/advanced_usage/02_generic_power_ups.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{title:"\ud83e\udeab Generic PowerUps",image:"../header.jpg"},sidebar:"tutorialSidebar",previous:{title:"\ud83d\udd0b PowerUps & Interfaces",permalink:"/docs/super_nodes/advanced_usage/implementing_interfaces"},next:{title:"\u267b\ufe0f Sharing PowerUps",permalink:"/docs/super_nodes/advanced_usage/sharing_power_ups"}},s={},l=[{value:"\ud83d\udd0c Creating a Generic PowerUp",id:"-creating-a-generic-powerup",level:2},{value:"\u26a1\ufe0f Using a Generic PowerUp",id:"\ufe0f-using-a-generic-powerup",level:2},{value:"\ud83d\udc6f Type Substitution",id:"-type-substitution",level:2}],u=(c="Details",function(e){return console.warn("Component "+c+" was not imported, exported, or provided by MDXProvider as global scope"),(0,i.kt)("div",e)});var c;const d={toc:l};function g(e){let{components:n,...t}=e;return(0,i.kt)("wrapper",(0,r.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"PowerUps support generic type parameters. Using PowerUps as generic mixins can allow you to implement patterns that would otherwise be difficult, painful, or impossible to implement without expensive runtime reflection."),(0,i.kt)("h2",{id:"-creating-a-generic-powerup"},"\ud83d\udd0c Creating a Generic PowerUp"),(0,i.kt)("p",null,"Creating a generic PowerUp is the same as creating a generic class:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},'namespace GenericPowerUpExample;\n\nusing Godot;\nusing SuperNodes.Types;\n\n[PowerUp]\npublic partial class MyPowerUp<T> : Node {\n  public T Value { get; set; } = default!;\n\n  public void OnMyPowerUp(int what) {\n    if (what == NotificationReady) {\n      if (Value is string) {\n        GD.Print("You gave me a string!");\n      }\n      else if (Value is int) {\n        GD.Print("You gave me an int!");\n      }\n      else {\n        GD.Print("You gave me something else!");\n      }\n    }\n  }\n}\n')),(0,i.kt)("p",null,"Any SuperNode that applies this PowerUp will gain a ",(0,i.kt)("inlineCode",{parentName:"p"},"Value")," property of the type specified by ",(0,i.kt)("inlineCode",{parentName:"p"},"T"),"."),(0,i.kt)("h2",{id:"\ufe0f-using-a-generic-powerup"},"\u26a1\ufe0f Using a Generic PowerUp"),(0,i.kt)("p",null,"To use a generic PowerUp, simply specify the type arguments when applying the PowerUp:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"namespace GenericPowerUpExample;\n\nusing Godot;\nusing SuperNodes.Types;\n\n[SuperNode(typeof(MyPowerUp<string>))]\npublic partial class MySuperNode : Node {\n  public override partial void _Notification(int what);\n\n  public void OnReady() => System.Diagnostics.Debug.Assert(Value is not null);\n}\n")),(0,i.kt)("h2",{id:"-type-substitution"},"\ud83d\udc6f Type Substitution"),(0,i.kt)("p",null,"At compile time, the SuperNodes generator will substitute the type parameters on the PowerUp with the type arguments given to it from the ",(0,i.kt)("inlineCode",{parentName:"p"},"[SuperNode]")," attribute."),(0,i.kt)("p",null,"Here's the generated code for the example above:"),(0,i.kt)(u,{summary:(0,i.kt)("summary",null,(0,i.kt)("code",null,"GenericPowerUpExample.MySuperNode_MyPowerUp.g.cs")),mdxType:"Details"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},'#nullable enable\nusing Godot;\nusing SuperNodes.Types;\n\nnamespace GenericPowerUpExample {\n  partial class MySuperNode\n  {\n    public string Value { get; set; } = default !; // <-- Type was changed!\n    public void OnMyPowerUp(int what)\n    {\n      if (what == NotificationReady)\n      {\n        if (Value is string)\n        {\n          GD.Print("You gave me a string!");\n        }\n        else if (Value is int)\n        {\n          GD.Print("You gave me an int!");\n        }\n        else\n        {\n          GD.Print("You gave me something else!");\n        }\n      }\n    }\n  }\n}\n#nullable disable\n'))))}g.isMDXComponent=!0}}]);