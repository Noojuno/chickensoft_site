"use strict";(self.webpackChunkchickensoft_site=self.webpackChunkchickensoft_site||[]).push([[866],{4612:e=>{e.exports=JSON.parse('{"blogPosts":[{"id":"game-architecture","metadata":{"permalink":"/blog/game-architecture","source":"@site/blog/2023-12-01-game-architecture/index.md","title":"Enjoyable Game Architecture","description":"If we can make building games easier, we can focus on the hard part: designing them.\\n","date":"2023-12-01T00:00:00.000Z","formattedDate":"December 1, 2023","tags":[],"readingTime":38.095,"hasTruncateMarker":true,"authors":[{"name":"Joanna","title":"Founder @ Chickensoft","url":"/authors/joanna","imageURL":"/img/authors/joanna.jpg","key":"joanna"}],"frontMatter":{"title":"Enjoyable Game Architecture","description":"If we can make building games easier, we can focus on the hard part: designing them.\\n","image":"./header.jpg","slug":"game-architecture","keywords":["software architecture","architecture","Godot","C#","game design","game engine","Unity","indie game development","open source","foss","programming language","game development","scripting","performance optimization","syntax comparison","cross-platform","community support","tutorials","game engine features","2D game development","3D game development","game development tips","game programming","game publishing"],"authors":["joanna"]},"nextItem":{"title":"Can Godot Deliver?","permalink":"/blog/godot-delivers"}},"content":"<FancyImage src={require(\\"./header.jpg\\").default} alt=\\"Game architecture header image.\\" />\\n\\nGame architecture, like all software architecture, tends to be neglected or forgotten as a project goes on. Scalable, enjoyable, production codebases are so rare they\'re almost mythical.\\n\\n\x3c!-- truncate --\x3e\\n\\nIt doesn\'t have to be this way: just because video game development is difficult doesn\'t mean it has to be painful. You can still achieve a robust software architecture that scales with your game \u2014\xa0even as you rework core systems and make sweeping refactors. Since architecture is based on expert opinions and developer experiences, we\'ll borrow from the wisdom of other software architectures to create a game architecture that prioritizes an enjoyable developer experience.\\n\\nOver the last few years, I\'ve been making and maintaining over a dozen open source packages for Godot and C#. While leveraging these packages and the opinionated architecture described in this article, I was able to build a 3D platformer demo in just a month or two of spare time. If you\'re willing to stick around, I\'d love to share the methodology, the rationale, and even the demo itself with you.\\n\\n<Spacer><YoutubeEmbed embedUrl=\\"https://www.youtube.com/embed/LEethjxNnrw?si=LPGQLn3C2x9hgmPm\\" /></Spacer>\\n\\nIn the demo, your goal is to collect all the coins hidden in the 3D world. Go ahead and take a quick look at the demo\'s code on GitHub: if you like the way the code is written, you\'ll like this article. If you don\'t, you should write a rebuttal. Either way, I look forward to hearing from you.\\n\\n<Spacer><GithubCard profile=\'chickensoft-games\' repo=\'GameDemo\' logo=\'/img/chickensoft/game_demo.png\'/></Spacer>\\n\\n> Most of the assets used in the demo are free assets created by [GDQuest](https://www.gdquest.com/) \u2014 please check them out and support their efforts!\\n\\nWhy am I tackling something as subjective and nebulous as architecture? Because, deep down inside, I believe most of us don\'t want to bother with architecture. We just want to make our game and have a good time doing it. Unfortunately, if you just start writing code without a second thought, you\'ll often find that the further you get, the harder it gets.\\n\\n<FancyImage src={require(\\"./images/white_whale.png\\").default} alt=\\"Architecture: software engineering\'s white whale.\\">\\nA spoof of the charts in Martin Fowler\'s article <a href=\\"https://martinfowler.com/articles/is-quality-worth-cost.html\\">\\"Is High Quality Software Worth the Cost?\\"</a>.\\n</FancyImage>\\n\\n## \ud83d\udca1 What Is Software Architecture?\\n\\nYou already know, but we\'ll define it anyways for the sake of completeness.\\n\\n_A software architecture is a set of rules and practices designed around the developers\' goals for their team\'s code._\\n\\nWhether or not those practices actually accomplish those goals is another matter entirely.\\n\\nI believe a good architecture is **opinionated**, **based on learnings from past projects** which met the same (or similar) goals, and **plays nicely with the development tools** for your particular stack: i.e., _a good architecture should provide structure, be based on experience, and be practical to implement_.\\n\\nIf there\'s two equally good ways to do something, a good architecture will pick one as the reccomended approach. Good architectures embrace collectivism, not individualism. Each feature or component should be implemented similarly to the other features and components. Increasing code-similarity allows developers to ramp up quickly, switch between features with relative ease, and reduces the number of complex details they have to remember.\\n\\n<FancyImage src={require(\\"./images/architecture_sanity.png\\").default} alt=\\"Architecture sanity test.\\">\\nWhen loose coupling is eliminated, a good architecture should probably be a directed, acyclic graph.\\n</FancyImage>\\n\\nBelow, I\'ve listed some common, high-level goals that a good architecture might be designed around. These goals range from overall organizational practices to annoying details about where files should be placed and how code should be formatted and linted.\\n\\n1. **Organization**: Where do I put code and related assets when adding a new feature?\\n2. **Development**: How do I know what code to write to accomplish a feature?\\n3. **Testing**: How do I write tests for my feature?\\n4. **Structure**: How do I get the dependencies my features need?\\n5. **Consistency**: How do I keep my code formatted? (Yes, this is important. If you don\'t have automatic style enforcement, you can run into problems where your IDE\'s language server is trying to apply auto-fixes that make your life hard with the style of coding you\'ve chosen.)\\n6. **Flexibility**: What happens when I need to refactor something? An optimal architecture would allow us to overhaul a feature without breaking the other features, enabling us to iterate faster and keep our code flexible.\\n\\nWhile the architecture can\'t hold your hand and give you line-by-line coding instructions (that\'s the job of the senior developers on your team), it should, at least, give you a good idea of where to start when you first grab that ticket off the backlog.\\n\\nA good architecture should help prevent writer\'s, er, coder\'s block when you first start on a new feature. It should take the guesswork out of what should be mundane procedures (like scaffolding out a new view, its state management, and its tests) and turn it into something you can do in your sleep (or automate with some snippets).\\n\\nTo achieve the lofty goals above, we\'ll create specific, concrete requirements for our architecture that serves our noble goals. Our ideal architecture should\u2026\\n\\n1. Define **abstraction layers** to organize code modules.\\n2. Provide an **organization system** for the files and assets in the codebase.\\n3. Allow each \\"unit\\" of code to be **tested in isolation**.\\n\\nTo meet these goals, we\'ll draw inspiration from a number of existing patterns and architectures, casually incorporating whatever we like.\\n\\n## \ud83c\udf70 Abstraction Layers\\n\\nOur ideal architecture should provide an opinion about the overall structure of our game. In a typical visual application, you might have the view layer, business logic / domain layer, and the data layer.\\n\\nFor games, we can make our own, similar layers. Each layer will correspond to a type of object in our codebase.\\n\\n- **Visual Layer** \u2014 Scripted game engine components. A Unity `MonoBehavior` attached to a game object, a Godot `Node` script class, etc.\\n- **GameLogic Layer** \u2014 the meat and potatoes of your game, itself broken into two \\"sublayers\\":\\n  - **Visual Game Logic Layer** \u2014 state machines, behavior trees, or other stateful mechanisms that drive a single game engine component\'s state.\\n  - **Pure Game Logic Layer** \u2014 repository classes that perform game logic that\'s not specific to any single visual component.\\n- **Data Layer** \u2014 Various client classes for \\"lower level\\" interactions, such as networking and persistent storage.\\n\\nTogether, these 3 abstraction layers allow us to look at our game critically. Most pieces of code should fall into one of those layers nicely.\\n\\n<FancyImage src={require(\\"./images/game_architecture.png\\").default} alt=\\"Game Architecture Layers of Abstraction\\">\\nThe big 3 abstraction layers: visuals, game logic, and data.\\n</FancyImage>\\n\\n> Differentiating game logic into visual game logic and pure game logic is an idea reminiscent of the way [clean architecture](https://blog.cleancoder.com/uncle-bob/2012/08/13/the-clean-architecture.html) distinguishes between \\"enterprise-wide business rules\\" and \\"application specific business rules.\\"\\n\\nWe\'ll also introduce an additional stipulation into our architecture: objects in one layer can only be strongly coupled with objects in the layer directly below them. You might recognize this rule from the strict form of [layered architecture](https://cs.uwaterloo.ca/~m2nagapp/courses/CS446/1195/Arch_Design_Activity/Layered.pdf).\\n\\nRestricting objects to only interacting with objects in the layer directly beneath them prevents sibling dependencies in the same layer (strong coupling), as well as \\"skipping\\" layers, which would indicate a design oversight.\\n\\n### \ud83c\udfad Visual Layer\\n\\nVisual components drive the things we see in the game engine. They come in many flavors, but tend to be pretty similar across game engines. In Unity, you\'ll find `MonoBehavior` components that are applied to GameObjects. In Godot, we subclass a Godot `Node` and attach the script to a scene node. Both of these systems allow us to represent visual components within the engine.\\n\\n<FancyImage src={require(\\"./images/visual_component.png\\").default} alt=\\"Game Engine Visual Components\\">\\nYou know, the part you can actually see.\\n</FancyImage>\\n\\nMost game developers will reiterate the importance of separating your visual logic from your game logic, citing the [single responsibility principle](https://en.wikipedia.org/wiki/Single-responsibility_principle) \u2014 so, how do you do that exactly?\\n\\nMechanisms like **state machines** and **behavior trees** are commonly used to separate the \\"state\\" of something from the code that visualizes it. For example, a visual script can create a state machine and provide a reference to itself to the state machine, allowing the state machine to \\"drive\\" the visual object as it changes between states. The visual script can likewise hang onto a reference to its state machine, forwarding relevant input events to it, giving the state machine a chance to drive it whenever something happens.\\n\\n<FancyImage src={require(\\"./images/game_engine.png\\").default} alt=\\"Level being edited in the Godot game engine.\\">\\nEditing a level in the Godot game engine.\\n</FancyImage>\\n\\nAn optimal architecture would probably eliminate conditional branching from visual game component scripts altogether, performing all logic in the component\'s state machine or other state mechanism.\\n\\nReal life isn\'t always so pretty, though: for performance reasons, it\'s often advantageous to have a few checks in the visual component itself to decide if it\'s even worth passing an event to the state machine. If you don\'t, garbage collected languages like C# can generate a lot of unnecessary memory pressure, depending on how carefully you handle input queuing and memory allocation.\\n\\nBelow is a minimum example of a visual node script. For the sake of example, it is completely stateless. The only event that can happen \u2014 the main menu button being pressed \u2014 is forwarded via the use of a signal, allowing a stateful ancestor to manipulate this node.\\n\\n```csharp\\n[SuperNode(typeof(AutoNode))]\\npublic partial class WinMenu : Control, IWinMenu {\\n  public override partial void _Notification(int what);\\n\\n  #region Nodes\\n  [Node]\\n  public IButton MainMenuButton { get; set; } = default!;\\n  #endregion Nodes\\n\\n  #region Signals\\n  [Signal]\\n  public delegate void MainMenuEventHandler();\\n  #endregion Signals\\n\\n  public void OnReady() => MainMenuButton.Pressed += OnMainMenuPressed;\\n\\n  public void OnExitTree() => MainMenuButton.Pressed -= OnMainMenuPressed;\\n\\n  public void OnMainMenuPressed() => EmitSignal(SignalName.MainMenu);\\n}\\n```\\n\\n> You\'ll often find that many nodes can be stateless, simply signaling when something happens. Stripping as much logic out of the visual layer is beneficial because it allows stateful, parent nodes to manipulate the simpler, stateless nodes. For comparison, Google\'s cross platform app framework [Flutter](https://flutter.dev/) specifically forces you to distinguish between a [StatefulWidget](https://api.flutter.dev/flutter/widgets/StatefulWidget-class.html) and a [StatelessWidget](https://api.flutter.dev/flutter/widgets/StatelessWidget-class.html). This same distinction applies to Godot, since they both share a visual, tree-based composition structure.\\n\\nWe\'ll be making extensive use of the [SuperNodes] source generator, which lets us \\"copy\\" code from one class and \\"paste\\" it into another class (i.e., compile-time [mixins](https://en.wikipedia.org/wiki/Mixin)).\\n\\nIn the example above, the `AutoNode` mixin (called a `PowerUp` in `SuperNodes` terminology) automatically adds code into our `WinMenu` class at build-time that will connect the `MainMenuButton` property to its corresponding node with the same unique identifier, `%MainMenuButton` in the scene. Little tricks like that help save us a ton of error-prone typing.\\n\\nThe AutoNode mixin comes from Chickensoft\'s [PowerUps] collection. We\'ll be using a few other PowerUps in this article, which we\'ll explain as we go.\\n\\n### \ud83e\udd16 GameLogic Layer\\n\\nGame logic simply refers to code that manipulates the game and its mechanics, without having to directly worry about other concerns like how the game is visualized, networked, or persisted.\\n\\nIn our architecture, we differentiate between two kinds of game logic. Let\'s look at each one.\\n\\n#### \ud83d\uddbc Visual Game Logic Layer\\n\\nAs mentioned, visual game logic is just code that\'s specific to a single visual component (state machines, behavior trees, or other stateful mechanisms that belong to a specific visual component).\\n\\nFor visuals that do anything more than just appearing in game, they should probably have a reference to a [behavior tree](<https://en.wikipedia.org/wiki/Behavior_tree_(artificial_intelligence,_robotics_and_control)>), [state machine](https://en.wikipedia.org/wiki/Finite-state_machine), [statechart], or other such stateful mechanism that represents their state-of-being.\\n\\nStateful mechanisms can have be loosely coupled to their owning components via an interface, enabling them to \\"drive\\" their visual components by calling methods on them or producing outputs that the visual game component binds to.\\n\\n_The visual component\'s job is to shut up and look pretty_. The dumber it is, the better. An ideal visual component will just forward all inputs to its underlying state machine (or whatever it\'s using).\\n\\n<FancyImage src={require(\\"./images/visual_game_logic.png\\").default} alt=\\"Game Engine Visual Components\\">\\nYou know, the part you can actually see.\\n</FancyImage>\\n\\n##### State Management In Practice\\n\\nFor some of the more complex visual components in your game, a simple state machine would get out of hand quickly. Most likely, you\'ll end up using a [statechart], a type of hierarchical state machine that can help avoid the pitfalls of ordinary state machines.\\n\\nFortunately, I\'ve already created an ergonomic, hierarchical state machine implementation called [LogicBlocks](https://github.com/chickensoft-games/LogicBlocks) that allows you to write your states the way you write ordinary C# ~~classes~~ records. In the game demo, LogicBlocks easily handled the menu transition logic, overall pause mode, player state machine, and every other stateful component.\\n\\nI\'d recommend at least considering using LogicBlocks, for the following reasons:\\n\\n- Includes a picture generator that reads your code and helps you visualize it as a UML state diagram.\\n- Easily testable (abstracts inputs and outputs).\\n- No need to define transition tables. It operates more like a [Moore machine](https://en.wikipedia.org/wiki/Moore_machine), which is a lot more ergonomic than the typical transition-based approach.\\n- Correctly implements state entrance and exit callbacks for nested states.\\n- Correctly queues and processes inputs.\\n- Provides states with a blackboard \u2014 a shared data store.\\n- Includes an ergonomic binding system that allows you to easily synchronize the visual component with its state.\\n- LogicBlocks can add input to themselves, allowing them to initiate subsequent state changes.\\n\\n<FancyImage src={require(\\"./images/player.png\\").default} alt=\\"Player state diagram generated by LogicBlocks.\\">\\nState diagram generated by LogicBlocks for the player in the 3D platformer demo.\\n</FancyImage>\\n\\nBelow, here\'s the `InGameUILogic` state machine from the game demo. It\'s an incredibly simple state machine \u2014 it only has one state that subscribes to the `AppRepository` (see next section for details) and produces outputs whenever the number of coins changes.\\n\\n```csharp\\npublic partial class InGameUILogic {\\n  public record State : StateLogic, IState {\\n\\n    public State(IContext context) : base(context) {\\n      var appRepo = context.Get<IAppRepo>();\\n\\n      OnEnter<State>((previous) => {\\n        appRepo.NumCoinsCollected.Sync += OnNumCoinsCollected;\\n        appRepo.NumCoinsAtStart.Sync += OnNumCoinsAtStart;\\n      });\\n\\n      OnExit<State>((next) => {\\n        appRepo.NumCoinsCollected.Sync -= OnNumCoinsCollected;\\n        appRepo.NumCoinsAtStart.Sync -= OnNumCoinsAtStart;\\n      });\\n    }\\n\\n    public void OnNumCoinsCollected(int numCoinsCollected) {\\n      Context.Output(new Output.NumCoinsCollectedChanged(numCoinsCollected));\\n    }\\n\\n    public void OnNumCoinsAtStart(int numCoinsAtStart) {\\n      Context.Output(new Output.NumCoinsAtStartChanged(numCoinsAtStart));\\n    }\\n\\n  }\\n}\\n```\\n\\nMeanwhile, the actual Godot Node for the `InGameUI` binds to the state machine\'s outputs, updating the UI whenever the number of coins changes.\\n\\n```csharp\\n\\n[SuperNode(typeof(AutoNode), typeof(Dependent))]\\npublic partial class InGameUI : Control, IInGameUI {\\n\\n  // ...\\n\\n  public void OnResolved() {\\n    InGameUIBinding = InGameUILogic.Bind();\\n\\n    InGameUIBinding\\n      .Handle<InGameUILogic.Output.NumCoinsCollectedChanged>(\\n        (output) => SetCoinsLabel(\\n          output.NumCoinsCollected, AppRepo.NumCoinsAtStart.Value\\n        )\\n      )\\n      .Handle<InGameUILogic.Output.NumCoinsAtStartChanged>(\\n        (output) => SetCoinsLabel(\\n          AppRepo.NumCoinsCollected.Value, output.NumCoinsAtStart\\n        )\\n      );\\n\\n    InGameUILogic.Start();\\n  }\\n\\n  public void SetCoinsLabel(int coins, int totalCoins) {\\n    CoinsLabel.Text = $\\"{coins}/{totalCoins}\\";\\n  }\\n\\n  // ...\\n}\\n```\\n\\n#### \ud83c\udfb0 Pure Game Logic Layer\\n\\n\\"Pure\\" game logic encompasses the \\"domain\\" of your game. Components in the pure game logic layer are typically repositories, which are usually just plain-old C# classes. Repositories are responsible for implementing the rules that compromise your game\'s domain.\\n\\n##### The Domain of Chess\\n\\nIn chess, the rook can capture any piece in its path if doing so would not put the king in check. The rook must also stop at the location where the capture occurs. The concept of \\"capturing\\" is a rule specific to chess, and thereby exists within the \\"domain\\" of chess.\\n\\nBecause capturing involves more than just a single chess piece, it can\'t be implemented cleanly in the visual game logic layer. Instead, the state machine for a rook might realize it\'s being directed to capture a piece, and then call a repository method to attempt the capture. If the rook is allowed to capture the piece, the repository will perform the capture, firing an event that the newly captured piece would already be subscribed to. The captured piece will remove itself from the board, and the repository can return a success indicator to the rook\'s state machine.\\n\\n<FancyImage src={require(\\"./images/chess.png\\").default} alt=\\"Capturing in Chess\\">\\nThe rules for capturing pieces falls within the game\'s domain.\\n</FancyImage>\\n\\n##### Making Repositories\\n\\nIn the game demo, we have an `AppRepository` that allows us to handle the game logic for the entire app. Since collecting coins affects more than just a single visual component and is responsible for how you win the game, we handle coin collection inside the `AppRepository`.\\n\\n```csharp\\n/// <summary>\\n/// Pure application game logic repository \u2014\xa0shared between view-specific logic\\n/// blocks.\\n/// </summary>\\npublic class AppRepo : IAppRepo {\\n  // ...\\n\\n  public void StartCoinCollection(ICoin coin) {\\n    _coinsBeingCollected++;\\n    _numCoinsCollected.OnNext(_numCoinsCollected.Value + 1);\\n    CoinCollected?.Invoke();\\n  }\\n\\n  public void OnFinishCoinCollection(ICoin coin) {\\n    _coinsBeingCollected--;\\n\\n    if (\\n      _coinsBeingCollected == 0 &&\\n      _numCoinsCollected.Value >= _numCoinsAtStart.Value\\n    ) {\\n      OnGameEnded(GameOverReason.PlayerWon);\\n    }\\n  }\\n\\n  // ...\\n}\\n```\\n\\nWe\'ve omitted quite a lot for the sake of brevity, but you probably get the idea: whenever a coin detects a collision with the player, it sends an event to its state machine, which starts the coin collection animation and tells the `AppRepository` that a coin is being collected. When the animation finishes, it tells the `AppRepository` that it\'s finished being collected.\\n\\nThe `AppRepository` tracks the number of coins that were collected and then fires an event to end the game. Other state machines on other visual components are subscribed to the game-over event, handling cleanup or transitioning to other screens, as needed.\\n\\n##### How Data Flows in a Game\\n\\nA good state machine, behavior tree, or other state implementation should be able to subscribe to events occurring in repositories, as well as receive events and/or query data from the visual component they belong to.\\n\\nYou can think of data flowing _down into the state_ from the visual component that owns it, and _bubbling upward from game logic repositories_ that need to broadcast events.\\n\\n<FancyImage src={require(\\"./images/separating_game_logic.png\\").default} alt=\\"Separating game logic from visualization.\\">\\nData flows down from the visuals via strongly coupled relationships, and bubbles back upwards via reactive mechanisms that promote loose coupling, like C# events, Observers, or other such utilities.\\n</FancyImage>\\n\\nIf all of this sounds familiar, it\'s probably because it\'s a [reactive](https://reactivex.io/) (as in ReactiveX, or rx) style of coding. Or maybe you\'ve used an [event bus](https://dzone.com/articles/design-patterns-event-bus) \u2014 another type of loosely-coupled, observable system.\\n\\n> I tend to think of reactive-style code like glue: it\'s extremely powerful, messy, and gets everywhere \u2014 so use sparingly! If you\'ve ever tried to explain multiple chained event source transformers that zip elements together to a junior programmer, you know just how tricky it is to wrap your head around. It\'s also tricky for yourself, 6 months in the future.\\n\\nFor the sake of convenience, I use a little reactive utility called [`AutoProp`](https://github.com/chickensoft-games/GoDotCollections#autoprop) inspired by C#\'s built-in events and observers. It\'s more or less the same API as a C# observer, but with a few tweaks to be more ergonomic.\\n\\n```csharp\\n  public IAutoProp<bool> MyValue => _myValue; // expose read-only version\\n  private readonly AutoProp<bool> _myValue = new AutoProp<bool>(false);\\n```\\n\\nTo keep things sane, we can create feature-specific game repositories. These repositories can be provided to any game component\'s state mechanism, allowing it to subscribe to the events offered by that repository. Since the visual game logic layer exists directly above the pure game logic layer, only state mechanisms will be allowed to interact with and subscribe to repositories.\\n\\n### \ud83d\udcbd Data Layer\\n\\nThe data layer represents various data clients in your application, like your network client or file client. In many cases, the game engine itself can suffice.\\n\\nBecause the data layer is the lowest layer of the application, repositories in the domain layer (your pure game logic) usually invoke various methods on the data layer to send and receive what they need through various channels. Like state machines subscribing to repositories, repositories can themselves subscribe to incoming data from the data layers, invoking their own events when something relevant in the game occurs, allowing all the relevant state machines to receive updates, which in turn updates their visual components. It\'s turtles all the way up.\\n\\nI didn\'t implement a game saving or loading in the game demo, so I don\'t have an example to show just yet. The next Chickensoft package I\'m working on will hopefully help reduce the workload of implementing versioned game save systems, so hang tight.\\n\\n## \ud83d\udc89 Dependency Injection\\n\\nOnce you know about all the things you\'ll need, you have to figure out how to get it. We know our app is going to consist of visual components, state management mechanisms, repositories, and data clients.\\n\\n<FancyImage src={require(\\"./images/tree_based_dependencies.png\\").default} alt=\\"Tree-based dependency provisioning\\">\\nSince Godot is a tree-based system, we can make nodes provide values to their descendant nodes.\\n</FancyImage>\\n\\nIn the real world, references to objects will trickle downward through each layer of abstraction until they settle into the right place. We\'re following the \\"objects in one layer shouldn\'t know about any other objects except those in the layer directly below them\\" rule from layered architecture, but once again, the real world isn\'t quite so squeaky clean.\\n\\nIn reality, here\'s how it actually works.\\n\\nA godot node script can provide a value to its descendants. In our game demo, the `Player` node script provides the its logic block, `PlayerLogic`, to its descendant nodes, allowing them to bind to its state machine.\\n\\nTo get this value for the first time, though, each descendant will need to search their ancestors to see if any of them provide the type of value they\'re looking for.\\n\\n> In most but the deepest trees, doing an ancestor walk is a very quick way to resolve a dependency provider. Deeper trees can re-provide the value to lower sections, reducing search distances.\\n\\nThere\'s another problem, though. In Godot, the deepest nodes are \\"readied\\" up before their ancestors. This means that the dependent nodes are asking their ancestor provider nodes for values that the providers haven\'t necessarily had a chance to initialize.\\n\\nWe solve this problem using the [AutoInject](https://github.com/chickensoft-games/AutoInject) mixin, which itself leverages the [SuperNodes] source generator for compile-time mixins. Under the hood, AutoInject temporarily subscribes to providers for the values it needs. Once the providers have indicated all their dependencies are good to go, AutoInject will make sure the dependent nodes have a chance to set themselves up. If providers immediately provide their values as soon as they\'re ready (and they should), all of this can happen in the same frame, making everything nice and deterministic.\\n\\nTo provide a value using AutoInject, our Player node simply needs to implement `IProvide<T>` for all of the value types it wants to provide.\\n\\n```csharp\\n[SuperNode(typeof(Provider))]\\npublic partial class Player : CharacterBody3D, IPlayer, IProvide<IPlayerLogic> {\\n  public override partial void _Notification(int what);\\n\\n  #region Provisions\\n  IPlayerLogic IProvide<IPlayerLogic>.Value() => PlayerLogic;\\n  #endregion Provisions\\n\\n  // ...\\n\\n  public void OnReady() {\\n    PlayerLogic = new PlayerLogic(/* ... */);\\n\\n    Provide(); // Indicate the dependencies we provide are now available.\\n  }\\n\\n}\\n```\\n\\nA descendant can just as easily access a dependency from an ancestor node by leveraging the `Dependent` mixin.\\n\\nThe `PlayerModel` node, which is a descendant of the `Player` node, binds to the player state machine and triggers visual animations based on the state machine\'s outputs.\\n\\n```csharp\\n[SuperNode(typeof(Dependent), typeof(AutoNode))]\\npublic partial class PlayerModel : Node3D {\\n  public override partial void _Notification(int what);\\n\\n  #region Dependencies\\n  [Dependency]\\n  public IPlayerLogic PlayerLogic => DependOn<IPlayerLogic>();\\n  #endregion Dependencies\\n\\n  public void OnResolved() {\\n    PlayerBinding = PlayerLogic.Bind();\\n\\n    PlayerBinding\\n      .Handle<PlayerLogic.Output.Animations.Idle>(\\n        (output) => AnimationStateMachine.Travel(\\"idle\\")\\n      )\\n      .Handle<PlayerLogic.Output.Animations.Move>(\\n        (output) => AnimationStateMachine.Travel(\\"move\\")\\n      )\\n      .Handle<PlayerLogic.Output.Animations.Jump>(\\n        (output) => AnimationStateMachine.Travel(\\"jump\\")\\n      )\\n      .Handle<PlayerLogic.Output.Animations.Fall>(\\n        (output) => AnimationStateMachine.Travel(\\"fall\\")\\n      )\\n      .Handle<PlayerLogic.Output.MoveSpeedChanged>(\\n        (output) => AnimationTree.Set(\\n          \\"parameters/main_animations/move/blend_position\\", output.Speed\\n        )\\n      );\\n  }\\n\\n  // ...\\n}\\n```\\n\\n### \ud83d\ude36\u200d\ud83c\udf2b\ufe0f Simplified Dependencies\\n\\nUsing such a simple dependency system provides a number of advantages.\\n\\n- Simple to reason about.\\n- Follows Godot\'s natural tree-based structure.\\n- Avoids nullability issues. Objects only exist when needed, where needed. Either the object and its dependents exist, or none of them exist. No more checking from your dependents to see if the thing you need is null or has null values.\\n- Declarative style of coding, making it clear what\'s responsible for what.\\n\\nBehind the scenes, AutoInject takes care of looking up providers, caching, subscribing to providers while it waits for them to provide values, and invalidating the cache when re-entering the tree. All we have to do is say what we\'re providing or what we want, and make sure our descendants are placed beneath ancestors that give them the values they need.\\n\\nIn the game demo, you can just search for `[Dependency]` to see every value that\'s looked up from an ancestor node. The visual nodes in the demo make extensive use of AutoInject to lookup repositories. Once dependencies are resolved, the repositories are passed to the state machines for the nodes.\\n\\n## \ud83e\uddd1\u200d\ud83d\udd2c Testing\\n\\nIf a software architecture allows all of the application\'s individual \\"units\\" \u2014 i.e., network clients, repositories, states, and views \u2014 to be tested independently of each other, it\'s probably a decent architecture. After all, testing something in isolation is the definition of a \\"unit test\\".\\n\\nIn unit testing, a \\"unit\\" is the smallest possible unit of code that can be tested in isolation. This annoying, recursive definition is important, because the quality of the architecture can determine how big a unit is. In an ideal world, each unit would belong in one \u2014 and only one \u2014 layer of abstraction.\\n\\n<FancyImage src={require(\\"./images/not_so_layered_architecture.png\\").default} alt=\\"Not-so-layered architecture\\">\\nWe\'ve all been there.\\n</FancyImage>\\n\\nHistorically, unit-testing visual components in game engines has been nearly impossible. Even Unity admits that a `MonoBehavior` [can\'t really be unit-tested](https://blog.unity.com/technology/unit-testing-part-2-unit-testing-monobehaviours).\\n\\nIn Godot, things are a little better. You can easily spin up a new instance of a scene, add it to a test scene, and use [GoDotTest] with [GodotTestDriver] to call the scene script\'s methods and assert that it manipulates the engine environment as you expect, and then undo anything it changes.\\n\\nMost people stop at this point, perfectly happy to be able to write tests for most things in their game. And that\'s fine, especially if you don\'t want to measure code coverage.\\n\\nIf you cannot quench your thirst for testing, and you find yourself wanting to measure code coverage accurately, the approach mentioned above won\'t quite work. You\'ll quickly realize that spinning up a scene means any of its child scenes get spun up, too. And if those child scenes have scripts, those get executed. That brings in a ton of other systems that you need to mock or swap in fake objects for, but there\'s no way to intercept the deserialization of the scene and swap everything out.\\n\\nBy now, your simple \\"unit\\" test has gone supernova, and is crossing so many layers of abstractions that your test has exploded into an integration test. As a result, your test ends up testing everything else in your game, and your code coverage becomes meaningless.\\n\\n<FancyImage src={require(\\"./images/scene_explosion.png\\").default} alt=\\"The scene explosion problem.\\">\\nTesting a scene in isolation is very hard to do, since they directly deserialize child scenes and their scripts.\\n</FancyImage>\\n\\nAfter all, code coverage is only accurate if you test each system in perfect isolation. Otherwise, you\'re contaminating the results and you won\'t be able to easily tell which systems you haven\'t tested yet.\\n\\nI can hear you wondering \\"well, what\'s the point of unit testing, then? Is it even worth it to test such small \'units\' of functionality?\\"\\n\\nYes, but not because we want to verify behavior. That\'s just an added bonus.\\n\\nWait, what? The point of unit testing isn\'t to verify behavior? Correct \u2014 at least, in my opinion.\\n\\n### \ud83e\uddea Why Write Unit Tests At All?\\n\\nI feel the same about unit tests as I do about high school teachers insisting we \\"show our work\\" in algebra class. It\'s a total chore, but it builds expertise and it\'s the right thing to do, even if you can just \\"solve it all in your head\\" (you never can when it comes to code).\\n\\nChores are just that. Necessary. We have to keep our houses clean or we end up with a bug infestation. Likewise, we have to keep our code clean or we end up with \u2014 wait. You get the idea.\\n\\nIf you, like me, dread cleaning your house, you should recall the age-old rule: if you have to do something you don\'t like, make it as easy as possible to do. Set yourself up for success. Listen to your favorite music while you clean the house and promise yourself you\'ll go out to dinner after.\\n\\nSo here\'s why I actually think unit tests are important:\\n\\n- **Unit tests are \\"showing your work.\\"** They ensure every line of code is executed at least once.\\n- **Unit tests enforce consistency and ensure your architecture is followed.** If you\'re not following the same architecture, it becomes harder to write tests. - Let\'s be honest: most tests start out as a copy/paste of some other tests, so you want to get this right up front.\\n- **Unit tests are disposable.** If you refactor something heavily, it\'s probably easier to just delete the tests and start over than it is to refactor the tests. Plus, you\'ll end up with better tests and it\'s often faster, anyways. If you\'re writing code decently well, this will be a non-issue.\\n- **Unit tests act as living documentation.** Your project wouldn\'t compile if they weren\'t up-to-date. If a developer needs to know how to use a particular piece of code, they can quickly look at the tests and get everything they need, because all of that code\'s capabilities will have tests.\\n- **Unit tests verify the state and/or behavior of the test subject.**\\n\\nThe fact that unit tests verify your code does what you say it does is just the icing on top. If code is strongly coupled, it becomes almost impossible to unit test. The mere existence of unit tests proves the code isn\'t terrible.\\n\\n<FancyImage src={require(\\"./images/unit_tests.png\\").default} alt=\\"Why that one teammate won\'t shut up about unit tests\\">\\nNow you can be that annoying teammate that won\'t shut up about unit tests!\\n</FancyImage>\\n\\n**If unit tests feel repetitive, it\'s because they are.** Depending on the test subject, you might end up testing a bit of behavior and state, which means that some of the tests can end up pretty tightly coupled. Obviously, with some practice or test utility abstractions, you can make them less coupled, but there tend to be plenty of tests that are basically just verifying the implementation of the test subject. And that\'s fine, because they\'re disposable. With today\'s AI-assisted coding, you\'ll be fine \u2014 I promise.\\n\\n> If you\'re just making a prototype of a game to get the gameplay right, you\'re not going to want to write many unit tests, if any. Unit testing tends to lock-in a lot of code, so don\'t do it until you\'re making the actual game.\\n\\nAn optimal architecture allows a game to achieve 100% code coverage through unit tests. There will always be situations where performance-critical code might be so tightly coupled that testing it in isolation is too difficult and a unit crosses more than one layer of abstraction. Fortunately, if everything else in your codebase is modularized enough to be tested in isolation, carving out a little blast radius where the rules are broken is perfectly allowable. It\'s one of those \u201cyou have to know the rules to break the rules\u201d type of things.\\n\\nAssuming you\'re convinced, let\'s talk about how it\'s actually done, now.\\n\\n### \ud83d\udd2c Unit Tests In Practice\\n\\nTo be able to test Godot scenes that incorporate other scenes, we need to be able make an instance of a scene without deserializing the actual scene file. Fortunately, Godot allows us to just `new` up any scene script we want \u2014 problem solved. Except, not quite. Once we add the script to the test scene to begin testing it, it will crash if it tries to find any children, since it won\'t have any. The child instances come from the `.tscn` file that we\'d normally deserialize when loading a scene, but since we just created an instance of a script, there won\'t be any children.\\n\\nThat\'s fine. We can just add a little functionality to our script (using a mixin) that simulates a fake node tree and returns fake nodes based on the paths it expects. This works surprisingly well, except we can\'t return interfaces, making mocking impossible. The reason we can\'t return interfaces is because Godot nodes don\'t actually have any corresponding interfaces \u2014 they\'re just classes.\\n\\nSince there\u2019s no interfaces, we have to create an actual node for every child. And that gets really tedious really fast, resulting in a ton of test fixtures.\\n\\nSo, to get around this, I\u2019ve created [GodotNodeInterfaces], which generates interfaces and adapters for every type of Godot node. It also provides alternative methods for accessing child nodes as their adapted interface, and works with a fake scene tree system for testing.\\n\\n<FancyImage src={require(\\"./images/testing_abstractions.png\\").default} alt=\\"Layers of Abstraction in Testing\\">\\nNow you can be that annoying teammate that won\'t shut up about unit tests!\\n</FancyImage>\\n\\nI haven\'t done extensive profiling with GodotNodeInterfaces, since I was getting hundreds of frames per second while using it. I imagine there\u2019s a slight performance impact in cases where the compiler can\u2019t inline everything.\\n\\nBecause the alternative child access functions GodotNodeInterfaces provides return wrapped versions of real Godot nodes, there\u2019s an allocation overhead. Fortunately, the allocation overhead can be mitigated by storing node references at the time your node script is created, getting all the allocations out of the way at once.\\n\\nIf you\u2019re still worried about performance, though, take it from one of my personal heroes, [Bob](https://twitter.com/munificentbob):\\n\\n> My experience, though, is that it\u2019s easier to make a fun game fast than it is to make a fast game fun. One compromise is to keep the code flexible until the design settles down and then tear out some of the abstraction later to improve your performance. \u2014 [Architecture, Performance, and Games](https://gameprogrammingpatterns.com/architecture-performance-and-games.html)\\n\\nSee? There\u2019s always plenty of time to write bad code! Once your game becomes sickeningly clean, stable, and fun to play, you have my blessing to corrupt it for the sake of performance. After all, \u201call magic comes at a price,\u201d or something like that.\\n\\n### \ud83d\udc81 Testing Tips\\n\\nIf you haven\'t done much testing with C#, you\'ll probably want to familiarize yourself with the basics, [including mocking](https://www.codemag.com/Article/2305041/Using-Moq-A-Simple-Guide-to-Mocking-for-.NET).\\n\\nIn this last section, we\'ll demonstrate how the architecture we\'ve outlined above allows us to test everything relatively easily.\\n\\n#### \ud83c\udfa8 Understanding Visual Testing\\n\\nTo test visual components, we have to reason very carefully about them. As mentioned previously, there\'s two ways to instantiate a Godot node for testing.\\n\\n1. Instantiate the visual component\'s scene script directly. We avoid doing this in unit tests since it would pollute code coverage by executing more than one unit in a uni-test. For integration tests when we\'re not measuring code coverage, instantiating scenes directly works easily enough.\\n\\n2. Create a new instance of a scene script, without deserializing its scene. This breaks child relationships once added to a scene tree, since those children don\'t exist since we didn\'t deserialize a scene file. We can get around this by using a fake scene tree system, which is what GodotNodeInterfaces provides.\\n\\nWe will always use approach `#2`.\\n\\nOnce we have an instance of a node to test, there\'s two ways to test it.\\n\\n1. We can add the node to the test scene tree, which allows it to manipulate the game engine environment and take up space in the world. For many nodes, we **have** to actually add them to the scene tree during testing to be able to verify their interactions with the engine.\\n\\n2. Alternatively, we can just call methods on the node without adding them to the scene tree. This works if nothing in the methods manipulates the scene tree or other properties of the node that require it to be in the tree. For many nodes, we can get away with this approach, since it\'s a bit simpler.\\n\\n#### \ud83d\udc77 Setting Up Testing\\n\\nWe\'ll be using [GoDotTest] as our test runner. GoDotTest guarantees a few invariants for us that help us run tests deterministically.\\n\\n- Tests are always executed one at a time, in the order they appear in the code for a particular test class.\\n- `Setup` and `Cleanup` methods can be called before and after each test, and `SetupAll` and `CleanupAll` methods can be called before and after running a test suite (i.e., a test class).\\n- Tests are able to be placed on the test scene.\\n- Tests can be run from the command-line, for CI/CD purposes.\\n- Tests are never run in parallel.\\n- Tests and their setup methods can be asynchronous, or not.\\n\\n#### \ud83e\uddec Two-Phase Initialization\\n\\nWe frequently need to **separate our script\'s initialization into two phases**: one phase for **creating the values** that belong to that script, such as its dependencies, state machines, and bindings, and the second for **using those dependencies or bindings**. If we don\'t separate the initialization from the usage, we won\'t have a way to inject mock values during a unit test since the values would be created and immediately used afterwards.\\n\\nIn practice, here\'s what splitting our initialization into two-phases looks like.\\n\\n```csharp\\n[SuperNode(typeof(AutoNode), typeof(Dependent))]\\npublic partial class InGameUI : Control, IInGameUI {\\n  public override partial void _Notification(int what);\\n\\n  #region Dependencies\\n  [Dependency]\\n  public IAppRepo AppRepo => DependOn<IAppRepo>();\\n  #endregion Dependencies\\n\\n  #region Nodes\\n  [Node]\\n  public ILabel CoinsLabel { get; set; } = default!;\\n  #endregion Nodes\\n\\n  #region State\\n  public IInGameUILogic InGameUILogic { get; set; } = default!;\\n  public InGameUILogic.IBinding InGameUIBinding { get; set; } = default!;\\n  #endregion State\\n\\n  public void Setup() {\\n    InGameUILogic = new InGameUILogic(this, AppRepo);\\n  }\\n\\n  public void OnResolved() {\\n    InGameUIBinding = InGameUILogic.Bind();\\n\\n    InGameUIBinding\\n      .Handle<InGameUILogic.Output.NumCoinsCollectedChanged>(\\n        (output) => SetCoinsLabel(\\n          output.NumCoinsCollected, AppRepo.NumCoinsAtStart.Value\\n        )\\n      )\\n      .Handle<InGameUILogic.Output.NumCoinsAtStartChanged>(\\n        (output) => SetCoinsLabel(\\n          AppRepo.NumCoinsCollected.Value, output.NumCoinsAtStart\\n        )\\n      );\\n\\n    InGameUILogic.Start();\\n  }\\n```\\n\\nOnce again, we\'re looking at the `InGameUI` view that displays the number of coins the user has collected while in-game. Notice the separate methods, `Setup()` and `OnResolved()`. The first method creates the `InGameUILogic` state machine, while the second binds to the state machine\'s outputs and starts the state machine.\\n\\nSince the script above uses [AutoInject] to resolve dependencies, we can leverage a lesser-known feature of AutoInject to help with this initialization process. AutoInject normally calls the `OnResolved()` method on your script once all the providers it found for your script\'s dependencies indicate they\'ve provided their values, but there\'s more to it than that.\\n\\nIf you have a `Setup()` method on your script, that method will be called after dependencies are resolved, but right before `OnResolved()` is called \u2014 if, and only if \u2014 your script\'s `IsTesting` property is set to false. The `IsTesting` property isn\'t shown, though \u2014 it\'s tucked away in a generated file.\\n\\n```csharp\\n// Contents of generated file GameDemo.InGameUI_Dependent.g.cs\\n\\n#pragma warning disable\\n#nullable enable\\nusing System;\\n// ...\\n\\nnamespace GameDemo {\\n  partial class InGameUI : global::Chickensoft.AutoInject.IDependent\\n  {\\n  #region SuperNodesStaticReflectionStubs\\n    /// <summary>\\n    /// True if the node is being unit-tested. When unit-tested, setup callbacks\\n    /// will not be invoked.\\n    /// </summary>\\n    public bool IsTesting { get; set; } = false;\\n\\n    // ...\\n```\\n\\nBy utilizing two-phase initialization, we are able to test our game component easily within the scene tree.\\n\\nI won\'t show full tests here, but you can check out the tests for the [Player](https://github.com/chickensoft-games/GameDemo/blob/main/test/src/player/PlayerTest.cs) node. It takes advantage of the two-phase initialization by preventing the Player\'s `Setup()` method from ever being invoked when running in the actual test scene, ensuring our mocked values get injected instead.\\n\\n#### \ud83c\udf32 Faking the Scene Tree\\n\\nEach scene should have only one script on its root node.\\n\\n:::tip\\nIf you find yourself needing to add a script to a non-root node in a Godot scene, don\u2019t. Instead, save the node branch as its own scene before adding a script to it.\\n\\nLikewise, if you you find yourself writing a Godot node script that manipulates its grandchildren, you may run into difficulty testing the script as a unit-test with a fake node tree. For best results, add a script to the child and ask it to manipulate its own children from your script. The general rule of thumb is \\"no script should manipulate nodes deeper than its children.\\"\\n:::\\n\\nEnsuring each scene only has one script on its root node allows you to make use of the fake scene tree system provided by [GodotNodeInterfaces] to easily test your scene. By referencing nodes as interfaces and automatically hooking them up with [AutoNode][PowerUps], we can easily test our scene in isolation without spinning up the entire subtree.\\n\\nIn the example below, taken from the game demo\'s [unit tests for the spinning gold coins](https://github.com/chickensoft-games/GameDemo/blob/main/test/src/coin/CoinTest.cs#L47-L50), we setup our tests by creating mock versions of the values the coin needs and then call the `FakeNodeTree` method generated by AutoNode to instruct our coin to use the mock objects for nodes at the provided paths instead of trying to connect to real children nodes.\\n\\n```csharp\\n  [Setup]\\n  public void Setup() {\\n    _appRepo = new Mock<IAppRepo>();\\n    _animPlayer = new Mock<IAnimationPlayer>();\\n    _coinModel = new Mock<INode3D>();\\n    _logic = new Mock<ICoinLogic>();\\n    _binding = CoinLogic.CreateFakeBinding();\\n\\n    _logic.Setup(logic => logic.Bind()).Returns(_binding);\\n\\n    _coin = new Coin {\\n      IsTesting = true,\\n      AnimationPlayer = _animPlayer.Object,\\n      CoinModel = _coinModel.Object,\\n      CoinLogic = _logic.Object,\\n      CoinBinding = _binding\\n    };\\n\\n    _coin.FakeDependency(_appRepo.Object);\\n\\n    _coin.FakeNodeTree(new() {\\n      [\\"%AnimationPlayer\\"] = _animPlayer.Object,\\n      [\\"%CoinModel\\"] = _coinModel.Object\\n    });\\n  }\\n```\\n\\n#### \ud83e\udd78 Mocking Dependencies Provided with AutoInject\\n\\nIn the example above, we also used the `FakeDependency` method generated with AutoInject. Faking a dependency prevents the dependent node from searching the tree for providers \u2014\xa0which wouldn\'t be present in a test scenario where you\'re just testing a script by itself. Instead, the dependent node we\'re testing will just use the provided value when it looks up a dependency of that type, allowing us to easily mock dependencies.\\n\\n## \ud83d\uddc2 File Structure and Feature-Based Architecture\\n\\nFiles should be organized in a way that benefits the artists and developers contributing to the codebase. Allow me to suggest feature-based organization here.\\n\\nIn feature-based organization, files are organized by feature, with any files that get shared between features in some sort of shared directory, typically called something like `common`.\\n\\nIn the game demo, we define features pretty simply. The player runs around collecting coins, jumping on mushrooms, and interacting with a physical environment. So, a mushroom is a feature, so is a coin, etc. You can define features however you want, but you probably want to check out the section \\"Thinking in Tokens\\" in Chapter 17 (page 482) of _Game Architecture and Design: A New Edition_ by Rollings and Morris.\\n\\nIn feature-based architecture, you really want to avoid strongly coupling your features together. If you can keep them loosely coupled, you can add and remove them with ease.\\n\\nTake a look at how the files are implemented for the Coin feature:\\n\\n```text\\n\u251c\u2500\u2500 src\\n\u2502\xa0\xa0 \u251c\u2500\u2500 coin\\n\u2502\xa0\xa0 \u2502\xa0\xa0 \u251c\u2500\u2500 Coin.cs\\n\u2502\xa0\xa0 \u2502\xa0\xa0 \u251c\u2500\u2500 Coin.tscn\\n\u2502\xa0\xa0 \u2502\xa0\xa0 \u251c\u2500\u2500 CollectorDetector.tscn\\n\u2502\xa0\xa0 \u2502\xa0\xa0 \u251c\u2500\u2500 audio\\n\u2502\xa0\xa0 \u2502\xa0\xa0 \u2502\xa0\xa0 \u251c\u2500\u2500 coin_collected.mp3\\n\u2502\xa0\xa0 \u2502\xa0\xa0 \u2502\xa0\xa0 \u2514\u2500\u2500 coin_collected.mp3.import\\n\u2502\xa0\xa0 \u2502\xa0\xa0 \u251c\u2500\u2500 state\\n\u2502\xa0\xa0 \u2502\xa0\xa0 \u2502\xa0\xa0 \u251c\u2500\u2500 CoinLogic.Input.cs\\n\u2502\xa0\xa0 \u2502\xa0\xa0 \u2502\xa0\xa0 \u251c\u2500\u2500 CoinLogic.Output.cs\\n\u2502\xa0\xa0 \u2502\xa0\xa0 \u2502\xa0\xa0 \u251c\u2500\u2500 CoinLogic.State.cs\\n\u2502\xa0\xa0 \u2502\xa0\xa0 \u2502\xa0\xa0 \u251c\u2500\u2500 CoinLogic.cs\\n\u2502\xa0\xa0 \u2502\xa0\xa0 \u2502\xa0\xa0 \u251c\u2500\u2500 CoinLogic.g.puml\\n\u2502\xa0\xa0 \u2502\xa0\xa0 \u2502\xa0\xa0 \u2514\u2500\u2500 states\\n\u2502\xa0\xa0 \u2502\xa0\xa0 \u2502\xa0\xa0     \u251c\u2500\u2500 CoinLogic.State.Collecting.cs\\n\u2502\xa0\xa0 \u2502\xa0\xa0 \u2502\xa0\xa0     \u2514\u2500\u2500 CoinLogic.State.Idle.cs\\n\u2502\xa0\xa0 \u2502\xa0\xa0 \u2514\u2500\u2500 visuals\\n\u2502\xa0\xa0 \u2502\xa0\xa0     \u251c\u2500\u2500 coin_model.glb\\n\u2502\xa0\xa0 \u2502\xa0\xa0     \u251c\u2500\u2500 coin_model.glb.import\\n\u2502\xa0\xa0 \u2502\xa0\xa0     \u251c\u2500\u2500 coin_normal.tres\\n\u2502\xa0\xa0 \u2502\xa0\xa0     \u251c\u2500\u2500 coin_roughness.tres\\n\u2502\xa0\xa0 \u2502\xa0\xa0     \u251c\u2500\u2500 coin_texture.tres\\n\u2502\xa0\xa0 \u2502\xa0\xa0     \u2514\u2500\u2500 teleport_3d.gdshader\\n```\\n\\nEverything the coin needs is located inside the `coin` folder. Even the states for the state machine are located in the `state/states` subfolder. All the other features are organized in the same way, too, making it easy for a developer to jump in and fix something, even if she hasn\'t been working on that feature. Artists can also quickly intuit where they might need to drop some updated visuals, too.\\n\\nI often see people suggest to keep separate folders for each type of file, like `scripts`, `scenes`, `textures`, etc. My little brain finds this organizational pattern difficult since related files are split across multiple places and it makes it harder to remember to go and rename the corresponding files in top-level directories elsewhere whenever you decide to rename something. You also have to know how to identify all the related files, too, which becomes a memory exercise in and of itself.\\n\\n### \ud83e\udea2 Preventing Strong Coupling in Features\\n\\nTo keep my features from being strongly coupled to each other, I made them interact with each other via interfaces. For example, the coin can be collected by anything that implements `ICoinCollector`. The coin doesn\'t care what it is, it just knows that it can be collected by anything that implements that interface. In the game, it\'s just the player.\\n\\nTo facilitate this, I simply created a folder in my `src` directory that contained interfaces used across features. I could have put these in a common directory, but I decided to have a `traits` directory for this sort of thing.\\n\\n```csharp\\n\u251c\u2500\u2500 src\\n\u2502\xa0\xa0 \u251c\u2500\u2500 traits\\n\u2502\xa0\xa0 \u2502\xa0\xa0 \u251c\u2500\u2500 ICoinCollector.cs\\n\u2502\xa0\xa0 \u2502\xa0\xa0 \u251c\u2500\u2500 IKillable.cs\\n\u2502\xa0\xa0 \u2502\xa0\xa0 \u2514\u2500\u2500 IPushEnabled.cs\\n```\\n\\nNo doubt, you can find further organizational patterns that improve on this. When you do, please pop into our Discord and share them with me ^-^.\\n\\n### \ud83c\udfdb File Structure for Tests\\n\\nThe unit tests for everything in the game demo are 1:1 mirror of everything in the source directory that needs tests, with the added `Test` suffix added to each file.\\n\\n```text\\n\u2514\u2500\u2500 test\\n    \u2514\u2500\u2500 src\\n        \u251c\u2500\u2500 coin\\n        \u2502\xa0\xa0 \u251c\u2500\u2500 CoinTest.cs\\n        \u2502\xa0\xa0 \u2514\u2500\u2500 state\\n        \u2502\xa0\xa0     \u251c\u2500\u2500 CoinLogicTest.cs\\n        \u2502\xa0\xa0     \u2514\u2500\u2500 states\\n        \u2502\xa0\xa0         \u251c\u2500\u2500 CoinLogic.State.CollectingTest.cs\\n        \u2502\xa0\xa0         \u2514\u2500\u2500 CoinLogic.State.IdleTest.cs\\n```\\n\\n## \ud83e\udd70 Conclusion\\n\\nThank you for reading my (excessively long) article on game architecture. There\'s no way I could dive into everything into as much detail as I wanted, so if you have questions, please feel free to reach out to me. If you find ways of working that are easier, better, and more enjoyable, please don\'t keep them to yourself. I\'d love to assimilate your knowledge!\\n\\n<Spacer><BlogDiscordInvite /></Spacer>\\n\\n\x3c!-- Links --\x3e\\n\\n[statechart]: https://statecharts.dev/\\n[SuperNodes]: https://github.com/chickensoft-games/SuperNodes\\n[AutoInject]: https://github.com/chickensoft-games/AutoInject\\n[GoDotTest]: https://github.com/chickensoft-games/GoDotTest\\n[GodotTestDriver]: https://github.com/derkork/godot-test-driver\\n[GodotNodeInterfaces]: https://github.com/chickensoft-games/GodotNodeInterfaces\\n[PowerUps]: https://github.com/chickensoft-games/PowerUps"},{"id":"godot-delivers","metadata":{"permalink":"/blog/godot-delivers","source":"@site/blog/2023-09-14-can-godot-deliver/index.md","title":"Can Godot Deliver?","description":"While Unity continues to break the trust of its users, Godot is promising to be the free and open \\"game engine you\'ve been waiting for.\\" But can it deliver?","date":"2023-09-14T00:00:00.000Z","formattedDate":"September 14, 2023","tags":[],"readingTime":4.04,"hasTruncateMarker":true,"authors":[{"name":"Joanna","title":"Founder @ Chickensoft","url":"/authors/joanna","imageURL":"/img/authors/joanna.jpg","key":"joanna"}],"frontMatter":{"title":"Can Godot Deliver?","description":"While Unity continues to break the trust of its users, Godot is promising to be the free and open \\"game engine you\'ve been waiting for.\\" But can it deliver?","image":"./header.jpg","slug":"godot-delivers","keywords":["Godot","Unity","game engine","C#","GDScript","open source","foss","programming language","game development","indie game development","scripting","performance optimization","syntax comparison","cross-platform","community support","tutorials","comparison","pros and cons","game engine features","2D game development","3D game development","game development tips","game design","game programming","game publishing"],"authors":["joanna"]},"prevItem":{"title":"Enjoyable Game Architecture","permalink":"/blog/game-architecture"},"nextItem":{"title":"GDScript vs C# in Godot 4","permalink":"/blog/gdscript-vs-csharp"}},"content":"<FancyImage src={require(\\"./header.jpg\\").default} alt=\\"While Unity continues to break the trust of its users, Godot is promising to be the free and open \'game engine you\'ve been waiting for.\' But can it deliver?\\" />\\n\\nThe game engine company Unity has once again gained notoriety for offending its users. This time, they\'ve announced [a $0.20 per install fee](https://www.forbes.com/sites/paultassi/2023/09/13/the-entire-gaming-industry-unites-against-unitys-baffling-pricing-change/?sh=3f403fa5679b) for games that surpass $200,000 in revenue. Of course, how they determine what constitutes a valid install is [not something they\'re willing to share](https://twitter.com/unity/status/1701689241456021607).\\n\\n\x3c!-- truncate --\x3e\\n\\n## \ud83d\udc94 Loved by all?\\n\\nUnity\'s recent cash grab is not all that unexpected, either: this is just the latest transgression in a string of unpopular decisions. In case you missed it, here\'s what the world\'s most-popular game engine has been up to:\\n\\n- [Lost 5 billion in market cap][marketwatch] after Apple\'s ad tracking changes.\\n- [Laid off a chunk of its workforce][techspot].\\n- Tried to [remove its own forums][forums], but ended up backpedaling after enraging the community.\\n- Merged with a [known adware company][adware].\\n- Canceled their own in-house game project, Gigaya, citing that it [\\"would have required a thorough cleanup and optimizations in its current stage.\\"][gigaya].\\n- Charging $0.20 per installation after $200,000 in revenue.\\n\\nAnd that\'s just what\'s happened in the last year and a half.\\n\\nPersonally, I have no idea why the company that dominates the vast majority of the game engine market wants to play the fiddle while they burn it all down. I guess we can\'t all have normal pastimes.\\n\\nSome have speculated that the Unity leadership is playing 4D chess and will roll-back the changes, leaving in place royalties or higher prices which seem more palatable by comparison. Or maybe they only care about enterprise clients now, or want everyone to litter their games with ads. Either way, no one knows for sure. And honestly, it wouldn\'t matter \u2014 once the fence of trust is broken, developers will start meandering over into greener pastures.\\n\\n## \ud83d\ude34 What\'s Godot Been Doing?\\n\\nGodot, due to its size and popularity over the years, has become somewhat of the de-facto choice for a game engine outside Unity or Unreal. It doesn\'t matter though, because many studios haven\'t ever given it a serious thought. You\'d be hard pressed to find a developer job using Godot.\\n\\nI suspect that is changing. While everyone has been chugging along using proprietary tools, the Godot team have been hard at work. They\'ve released a major new version, Godot 4, which drastically improved the codebase, paving the way for development of the missing features needed to make AAA games. Now that the foundation has been laid, it\'s just a matter of time before the work gets done.\\n\\nC# support has improved drastically, too. Godot 4 shifted the runtime from Mono to the .NET SDK, opening the door for tighter integration and faster development cycles. In fact, the latest releases of Godot 4 are testing Android platform support for C#, with iOS and Web support planned to follow when [.NET ships the correct infrastructure needed][dotnet-mobile-web].\\n\\n## \ud83d\udc96 Godot\'s Promise\\n\\nGodot promises to be the \\"free, open source engine that you\'ve been waiting for.\\" And if you look at what the creator, Juan Linietsky, has been saying over the years, you\'ll find an idealistic promise of a game engine that\'s [fully free and open][free-and-open] \u2014 a world where you don\'t have to worry who\'s going to try and take your game\'s profits from you.\\n\\nHe\'s also promising [to take care of Unity users who defect to Godot][unity-users] while [continuing improvements to the 3D system][3d].\\n\\nMeanwhile, when I reached out, the executive director of the Godot team told me they are hoping to hire someone full-time to work just on the Godot C# integration. The only thing holding them back is [funding].\\n\\nI can\'t speak for anyone else, but I believe in the Godot team. With C# alone, they\'ve fixed countless integration bugs, including at least one or two that I\'ve personally filed. And that\'s just the part of the engine that I\'ve been paying attention to. Godot has had contributions from over 2,000 people, and the team manages to triage countless fixes and pull requests on a shoestring budget compared to the competition.\\n\\nThe Godot team continually performs feats that are nothing short of magical at a fraction of the expense.\\n\\n## \u2705 Challenge Accepted\\n\\nWhether or not Unity intended to, I think they\'ve awoken a sleeping giant. Godot almost seemed ambivalent to Unity before \u2014 but now they\'re promising to take care of the users that Unity has left behind.\\n\\nSo, if I was a big studio with millions of dollars to toss around, I\'d put it into Godot. Free software can\'t be stopped.\\n\\n\x3c!-- truncate --\x3e\\n\\n\x3c!-- Sources --\x3e\\n\\n[marketwatch]: https://www.marketwatch.com/story/unity-software-loses-5-billion-in-market-cap-after-apples-changes-lead-to-self-inflicted-wound-11652291876\\n[gigaya]: https://forum.unity.com/threads/introducing-gigaya-unitys-upcoming-sample-game.1257135/page-2#post-8278305\\n[techspot]: https://www.techspot.com/news/95143-unity-laying-off-hundreds-employees-shares-continue-slide.html\\n[forums]: https://forum.unity.com/threads/unity-answers-shutdown-canceled.1293360/\\n[adware]: https://news.ycombinator.com/item?id=32081051\\n[dotnet-mobile-web]: https://github.com/godotengine/godot/issues/70796#issuecomment-1618006609\\n[free-and-open]: https://x.com/reduzio/status/1701712402687934957?s=20\\n[3d]: https://x.com/reduzio/status/1701700832830587116?s=20\\n[unity-users]: https://x.com/reduzio/status/1701872429016949135?s=20\\n[funding]: https://fund.godotengine.org/"},{"id":"gdscript-vs-csharp","metadata":{"permalink":"/blog/gdscript-vs-csharp","source":"@site/blog/2023-04-26-gdscript-vs-csharp/index.md","title":"GDScript vs C# in Godot 4","description":"Deep-dive into the advantages and disadvantages of GDScript and C#, as well as tips on how to choose one \u2014 or use them both!","date":"2023-04-26T00:00:00.000Z","formattedDate":"April 26, 2023","tags":[],"readingTime":9.435,"hasTruncateMarker":true,"authors":[{"name":"Joanna","title":"Founder @ Chickensoft","url":"/authors/joanna","imageURL":"/img/authors/joanna.jpg","key":"joanna"}],"frontMatter":{"title":"GDScript vs C# in Godot 4","description":"Deep-dive into the advantages and disadvantages of GDScript and C#, as well as tips on how to choose one \u2014 or use them both!","image":"./header.jpg","slug":"gdscript-vs-csharp","keywords":["Godot","game engine","GDScript","C#","programming language","game development","indie game development","scripting","performance optimization","syntax comparison","cross-platform","community support","tutorials","comparison","pros and cons","game engine features","2D game development","3D game development","game development tips","game design","game programming","game publishing"],"authors":["joanna"]},"prevItem":{"title":"Can Godot Deliver?","permalink":"/blog/godot-delivers"},"nextItem":{"title":"Godot and C#: A Viable Unity Alternative","permalink":"/blog/godot-unity-alternative"}},"content":"<FancyImage src={require(\\"./header.jpg\\").default} alt=\\"Godot allows you to use two incredible languages to build games, right out of the box. But how do you know which one to use?\\" />\\n\\nAlmost every day, someone asks \\"Should I use GDScript or C# to make my Godot game?\\"\\n\\nA lot of amazing advice has been given out on the Godot Reddit, the forums, various Discord servers, and just about anywhere people are talking about Godot \u2014 so let\'s write it up, once and for all!\\n\\n\x3c!-- truncate --\x3e\\n\\nIn this article, we\u2019ll take a deep dive into the advantages and disadvantages of GDScript and C# in Godot 4.x, as well as tips on how to choose one \u2014 or use them both!\\n\\n:::info\\nIn case you don\'t have time to read all this, here\'s why you might pick GDScript:\\n\\n- \u2705 You\'re new to coding or you\'re a casual hobbyist.\\n- \u2705 You\'re an expert who doesn\'t mind dynamic types.\\n- \u2705 You want seamless engine integration and native extension support.\\n- \u2705 Performance isn\'t a major concern (it usually isn\'t for game scripts).\\n- \u2705 No fighting with tooling. Write your code inside the engine itself!\\n\\nOn the other hand, here\'s some reasons why you might choose C#:\\n\\n- \u2705 You have experience with managed languages such as Java, Go, or Dart.\\n- \u2705 You already know C#, perhaps from using Unity previously or writing enterprise applications.\\n- \u2705 You prefer static typing.\\n- \u2705 You prefer curly braces over whitespace-delimited syntax.\\n- \u2705 You need access to mature developer tooling: linting, custom analyzers, and source generation.\\n- \u2705 You want additional performance without resorting to a systems language.\\n- \u2705 You need access to the vast library of .NET packages.\\n- \u26a0\ufe0f You don\'t need to export to iOS or web \u2014\xa0yet. [While C# Android export is being tested][csharp-android-export] in the latest releases, support for exporting to iOS and web are still planned for future releases. You can [track the progress here][csharp-mobile].\\n- \u274c You don\'t need to integrate with any GDExtensions. Currently, Godot does not generate C# bindings for GDExtensions, meaning you cannot call a GDExtension from C#. You can work around this by calling into GDScript from C# if you are willing to incur the performance penalty.\\n\\n:::\\n\\n## \ud83e\udd16 GDScript\\n\\nAs you likely know, Godot provides its own high-level, dynamically typed programming language called GDScript. While GDScript often gets compared to Python, I find the syntax to be even friendlier, with [optional type hints][gdscript-type-hints] that are also reminiscent of TypeScript or Swift.\\n\\n<FancyImage src={require(\\"./gdscript.jpg\\").default} alt=\\"GDScript code inside the Godot Engine editor.\\">\\nThe Godot Engine will provide this script as a starting point for all <code>CharacterBody3D</code> nodes.\\n</FancyImage>\\n\\nFor quick prototypes and experiments, I will often just throw together a quick script using GDScript (or hack away on someone else\'s) until I get what I want. In almost every case, it is simply easier and faster to use GDScript.\\n\\nIf you happen to be handy with C++ or Rust, you can create a [GDExtension][gdextension] for just about anything you can\'t do in GDScript (or that would be too slow to do in GDScript). Godot will generate bindings for extensions, allowing you to call your extension code from GDScript with no additional work. Pretty magical!\\n\\nTo sweeten the deal further, [Godot 4 has drastically improved GDScript][gdscript-whats-new]: it\'s [considerably faster][gdscript-performance], can [handle circular/cyclic dependencies][gdscript-cyclic-dependencies], and supports [lambda functions][gdscript-lambdas]. On top of all that, just about every tutorial or video you watch regarding Godot uses GDScript.\\n\\nIf you\'re not sold yet, there probably isn\'t anything else I can say to get you to use it.\\n\\n### \u2600\ufe0f GDScript Pros\\n\\n- \ud83d\ude80 Incredibly easy to learn and well supported.\\n- \ud83e\udd1d Many large, friendly communities that provide hands-on support.\\n- \ud83d\udcda Tons of tutorials and videos.\\n- \ud83e\udd73 Supports every platform Godot supports.\\n- \u2728 Always up-to-date with the latest Godot features.\\n- \ud83d\udd0c Perfect native extension integration.\\n- \ud83e\ude9b Tooling support \u2014 you can write GDScript directly inside the Godot Engine\'s editor, or use the [official VSCode extension][gdscript-vscode]. You can even get a [VSCode extension for formatting][gdscript-formatter] your GDScript files, too.\\n\\n### \ud83c\udf27 GDScript Cons\\n\\nSo what\'s the catch with GDScript? Not much, really, but I\'ll list a few considerations to be aware of here:\\n\\n- \ud83d\udca8 Not necessarily as performant as C#. There is a performance penalty when calling into the Godot engine from C# due to marshalling, but C# itself tends to execute considerably faster than GDScript.\\n- \ud83d\udd12 Any code written in GDScript is completely specific to the Godot engine. This is usually not a problem for game scripts (since they are not very portable by nature), but it\'s worth mentioning.\\n- \u2b1c\ufe0f Whitespace-delimited syntax. If you can\'t stand Python or just strongly prefer curly braces, no amount of GDScript will ever soothe your soul. Likewise, if you love whitespace-delimited syntax, you\'ll feel right at home.\\n- \u26a1\ufe0f Not statically typed. While you can specify type hints to help with error-checking, they are optional at best. For some, this is an advantage. For others, the lack of enforced static typing presents a headache.\\n\\nFor the majority of game developers I\'ve spoken to, none of those are typically deal-breakers. GDScript has a cult following for a reason: it\'s _really_, _really_ great. Now that you know its strengths and weaknesses, you can feel confident choosing it.\\n\\nStill not convinced? Let\'s talk about C#.\\n\\n## #\ufe0f\u20e3 C\\\\#\\n\\nWhile not as popular as GDScript, [C# support in Godot has come a long ways][csharp-whats-new]. Out of the approximately 5,000 surveyed users, [only about 13%][godot-2022-poll] said they were using C# to build Godot games.\\n\\n<FancyImage src={require(\\"./csharp.jpg\\").default} alt=\\"C# script for a Godot node.\\">\\nC# code for an editor tool that helps visualize a <code>RayCast3D</code>.\\n</FancyImage>\\n\\n### \ud83c\udf27 C# Cons\\n\\nBefore we get too far, it\'s worth reiterating a couple of points:\\n\\n- \u274c Godot can\'t export C# games for iOS or web.\\n- \u274c You cannot call GDExtensions directly from C#.\\n\\nIf either of those are an immediate must-have for your project, you should **not** use C#. Unless you are optimistic and believe those shortcomings will be addressed by the time your project requires them, you should use GDScript or a third party language integration instead.\\n\\n:::info\\nC# is incredibly powerful and allows you to tap into the massive .NET ecosystem of packages and tools, but it comes at a cost. If you\'re up for an adventure, don\'t mind a challenge, and can live with the drawbacks mentioned above, C# might be an excellent fit for your project.\\n:::\\n\\n### \u2600\ufe0f C# Pros\\n\\nBecause C# is a general-purpose programming language that first appeared 23 years ago, it is hard to fully extol its virtues. In the interest of time, I\'ll list a few positives within the context of Godot game development:\\n\\n- \ud83d\ude80 C# is a well-established language with the full weight of Microsoft behind it. If you\'ve ever used Java or Dart, you\'ll also feel right at home.\\n- \ud83d\udee0 Incredible tooling support. Want to create a custom analyzer with an automatic fix? A source generator? A template project? You can do that.\\n- \ud83e\uddd1\u200d\ud83d\udcbb Choice of IDE\'s: You can use [Visual Studio][vs], [JetBrains Rider][rider], or [Visual Studio Code][vscode].\\n- \ud83d\udce6 The entire .NET package ecosystem. If there\'s a nuget package that solves your problem, you can probably use it.\\n- \ud83e\udd1d There\'s an extremely helpful C# channel in the official [Godot Discord][godot-discord].\\n- \ud83d\udc24 We have a Chickensoft Discord server dedicated to supporting the Godot C# community. If you run into questions or just want to talk, feel free to stop by and say hello!\\n\\n<BlogDiscordInvite />\\n\\n### \ud83c\udf9f Free Stuff\\n\\nWhile there aren\'t many Godot addons created with C#, [Chickensoft] provides a number of well-tested packages to help you get started. Each project began as a piece of my own personal game project before being broken into separate packages to share with the community. Each project is fully tested and has 100% code coverage (for my own peace of mind).\\n\\nWant to quickly create a Godot game with basic CI/CD and unit testing already setup? Use our [`dotnet new` template][godot-game] for creating a game. We have [a package template][godot-package] for creating nuget packages for use with Godot, too.\\n\\nNeed to inject code into lifecycle methods in your scripts automatically? We have a [source generator][super-nodes] for that. How about automatic, [node-based dependency injection][auto-inject]?\\n\\nWe even have our own command line tool, [GodotEnv][godotenv], that will automatically manage Godot addons for your project based on an `addons.json` file and let you symlink addons locally while they\'re in development. No more git submodules for addons!\\n\\n<FancyImage src={require(\\"./packages.jpg\\").default} alt=\\"Chickensoft\'s package offerings\\">\\nChickensoft\'s package offerings as of April 2023.\\n</FancyImage>\\n\\nIf you\'d like to use Godot from a GitHub actions workflow, you can use [setup-godot] to run Godot directly on a macOS, Windows, or Linux runner.\\n\\nWe also have packages for [running tests inside Godot][go-dot-test], creating basic [state machines][go-dot-net] in C#, [logging][go-dot-log], and a handful of other things.\\n\\n:::tip\\nChickensoft is an open source organization \u2014 all of our offerings are _free_. We welcome contributions and feedback from the community!\\n:::\\n\\n## \ud83d\ude05 Afraid of Commitment?\\n\\nSince you can mix and match C# and GDScript in the same project, you only have to choose which language you want to use for the _majority_ of your project.\\n\\n:::tip\\nSince most of the existing Godot addons are written with GDScript, it\'s unlikely you\'d need to call into C# from GDScript if you picked GDScript for your scripting language.\\n:::\\n\\nIf you happened to have chosen C# as your primary scripting language, you may need to be able to call into GDScript occasionally from C# since it is impractical to rewrite every addon you might need in C#. While this probably isn\'t as efficient as keeping everything in one language, it can really help in a pinch.\\n\\nSo, if you hate committing to a single language, why not have both[^1]? The Godot documentation discusses [how to bridge between C# and GDScript][cross-lang-scripting].\\n\\n## \ud83c\udf81 Wrapping Up\\n\\nEven though Chickensoft is dedicated to the C# Godot community, C# isn\'t necessarily the correct choice for every Godot game. For most people, GDScript is probably the best choice.\\n\\nI like to think that if you need (or want) to use C#, you already know that deep down inside.\\n\\nUltimately, if you decide to embark on an adventure and use C# for your next Godot game, we\'re happy to lend a hand and cheer you on in the [Chickensoft Discord][discord]. Either way, we wish you the best of luck and we hope to hear from you! \ud83d\ude00\\n\\n:::info\\nIf you\'re interested in what I\'m up to, you are more than welcome to [follow me on Mastodon][mastodon] or [reach out to me on Discord][discord-personal].\\n:::\\n\\n[^1]: Practically speaking, there are very good reasons to keep the majority of your codebase in a single language: consistency, ease of refactoring, lowering the barrier to ramp up contributors, etc.\\n\\n[gdscript-lambdas]: https://docs.godotengine.org/en/stable/tutorials/scripting/gdscript/gdscript_basics.html#lambda-functions\\n[gdextension]: https://docs.godotengine.org/en/stable/tutorials/scripting/gdextension/what_is_gdextension.html\\n[csharp-mobile]: https://github.com/godotengine/godot/issues/68153#issuecomment-1299672279\\n[gdscript-type-hints]: https://godotengine.org/article/gdscript-progress-report-feature-complete-40/#typed-arrays\\n[gdscript-whats-new]: https://gdscript.com/articles/godot-4-gdscript/\\n[gdscript-performance]: https://godotengine.org/article/gdscript-progress-report-typed-instructions/#how-faster-is-it\\n[gdscript-cyclic-dependencies]: https://godotengine.org/article/dev-snapshot-godot-4-0-beta-6/\\n[gdscript-vscode]: https://marketplace.visualstudio.com/items?itemName=geequlim.godot-tools\\n[gdscript-formatter]: https://marketplace.visualstudio.com/items?itemName=Razoric.gdscript-toolkit-formatter\\n[godot-2022-poll]: https://docs.google.com/forms/d/e/1FAIpQLSe-OIpxXqou9cDnPXEAjxzpICbf8_YZB3jUizdECXRydtB8cA/viewanalytics\\n[csharp-whats-new]: https://godotengine.org/article/whats-new-in-csharp-for-godot-4-0/\\n[godot-discord]: https://discord.gg/4JBkykG\\n[discord]: https://discord.gg/gSjaPgMmYW\\n[Chickensoft]: /\\n[godot-game]: https://github.com/chickensoft-games/GodotGame\\n[godot-package]: https://github.com/chickensoft-games/GodotPackage\\n[super-nodes]: https://github.com/chickensoft-games/SuperNodes\\n[auto-inject]: https://github.com/chickensoft-games/AutoInject\\n[setup-godot]: https://github.com/chickensoft-games/setup-godot\\n[go-dot-test]: https://github.com/chickensoft-games/GoDotTest\\n[go-dot-net]: https://github.com/chickensoft-games/GoDotNet\\n[go-dot-log]: https://github.com/chickensoft-games/GoDotLog\\n[godotenv]: https://github.com/chickensoft-games/GodotEnv\\n[mastodon]: https://mastodon.online/@jolexxa\\n[discord-personal]: https://discordapp.com/users/jolexxa#4292\\n[vs]: https://visualstudio.microsoft.com/\\n[rider]: https://www.jetbrains.com/rider/\\n[vscode]: https://code.visualstudio.com/\\n[cross-lang-scripting]: https://docs.godotengine.org/en/stable/tutorials/scripting/cross_language_scripting.html\\n[csharp-android-export]: https://godotengine.org/article/dev-snapshot-godot-4-2-dev-3/"},{"id":"godot-unity-alternative","metadata":{"permalink":"/blog/godot-unity-alternative","source":"@site/blog/2022-11-27-godot-unity-alternative/index.md","title":"Godot and C#: A Viable Unity Alternative","description":"Godot had a really good year. So did C# support.","date":"2022-11-27T00:00:00.000Z","formattedDate":"November 27, 2022","tags":[],"readingTime":11.94,"hasTruncateMarker":true,"authors":[{"name":"Joanna","title":"Founder @ Chickensoft","url":"/authors/joanna","imageURL":"/img/authors/joanna.jpg","key":"joanna"}],"frontMatter":{"title":"Godot and C#: A Viable Unity Alternative","description":"Godot had a really good year. So did C# support.","image":"./header.jpg","slug":"godot-unity-alternative","keywords":["indie","csharp","godot","2022"],"authors":["joanna"]},"prevItem":{"title":"GDScript vs C# in Godot 4","permalink":"/blog/gdscript-vs-csharp"},"nextItem":{"title":"It\u2019s time to make that indie C# game in Godot.","permalink":"/blog/indie-game-godot"}},"content":"<FancyImage src={require(\\"./header.jpg\\").default} alt=\\"SatiRogue by @lewiji on GitHub\\">\\n<a href=\\"https://github.com/lewiji/SatiRogue\\">SatiRogue</a> by <a href=\\"https://twitter.com/TetrisMcKenna\\">@TetrisMcKenna</a>\\n</FancyImage>\\n\\nGodot is a viable alternative to Unity \u2014 not just for early adopters, but for game developers and artists across the entire skill spectrum.\\n\\n\x3c!-- truncate --\x3e\\n\\nThe engine provides a significantly better development experience (via text-based resources) and a snappy, responsive user interface. We\'ll spend the rest of the blog defending that statement and addressing common concerns about Godot.\\n\\nOver the last few months, I\'ve heard dozens of questions from interested users about Godot, the C# support it provides, and the future of the engine. It\'s important to note that I am in no way officially affiliated with the Godot Engine organization. I have, however, spoken with some of the core engine developers and contributors and **I\'d like to put the arguments against Godot and C# to rest, once and for all.**\\n\\nThere\'s a lot to cover, and it\'s all good news \u2014 so let\'s dive in!\\n\\n> Unrelated: this blog has officially moved away from Medium![^1]\\n\\n## \ud83c\udf87 Godot\'s Big Year\\n\\nIf you haven\'t been watching too closely, you might have missed some of the news! Godot 4 is now in beta, and it\'s shipping some impressive new features:\\n\\n- Vulkan renderer\\n- Signed distance, field-based global illumination (SDFGI) for large open worlds\\n- GPU lightmapping\\n- Custom sky shaders\\n- Automatically generated LOD (level-of-detail) meshes\\n- .NET 6 support\\n- Revamped shader language\\n- Circular dependencies support for GDScript\\n- ...[and countless other changes][godot4beta]\\n\\n<FancyImage src={require(\\"./aniela.jpg\\").default} alt=\\"Aniela \u2014 a lighting study made in Godot by @cybereality on Twitter\\">\\n<a href=\\"https://cybereality.itch.io/aniela\\">Aniela \u2014 a lighting study made in Godot</a> by <a href=\\"https://twitter.com/cybereality\\">@cybereality</a> demonstrating Godot 4\'s new SDFGI features.\\n</FancyImage>\\n\\nTo top it all off, C# support has been completely overhauled by migrating away from mono and integrating support for .NET 6 directly. We\'ll come back to that in a bit.\\n\\n### Overwhelming Support\\n\\nGodot continues to receive an overwhelming amount of support from the community. The creator of Godot, [Juan Linietsky][juan], describes how Godot suffers from the best possible problem:\\n\\n> we have too many people who are doing things really really efficiently and really well.\\"[^2]\\n\\nEssentially, the sheer number of contributors (1,800+ on GitHub) almost guarantees that any specific feature is being worked on at any given moment.\\n\\nOn [Patreon][patreon], Godot now receives over **`$15,000 USD`** of donations _per month_. That\'s an increase of `$2,000 USD` per month since I last checked on it in the summer.\\n\\nThe Godot subreddit, [r/godot], now has over **101,000 members**, an **increase of at least 5,000 users** since the summer (probably in large part to [Unity\'s missteps][unity-problems]). The official [Godot Discord][godot-discord] now has over **50,000 users**.\\n\\n## \ud83d\udc81\u200d\u2640\ufe0f Addressing Your Concerns\\n\\nOn Reddit (and occasionally elsewhere), interested users will ask if C# is \\"ready\\" or a \\"first-class\\" citizen in Godot. The answer is simple: **yes**.\\n\\nIf you don\'t believe me, read on. We\'ll respond to each of the common arguments against Godot and its support for C#.\\n\\n### Where\'s the asset store?\\n\\nWhen I tell people that Godot is a viable Unity alternative, this is usually the first counterargument I hear, and for good reason. Godot doesn\'t have a monetization system for assets..._yet_.\\n\\nOf course, Godot does have an official [Asset Library][asset-library] with over 1,500 assets, but they\'re all free. \ud83d\ude41\\n\\nMost of us would normally be thrilled about free assets, but when you\'re an artist or developer who relies on selling your assets to support yourself, giving away your products is a no-go. It\'s only fair that you should be able to make a living doing what you\'re good at.\\n\\nMonetization, as [someone pointed out on Reddit][reddit-asset-store-comment], requires a lot of bureaucratic effort. Collecting payments and being responsible for payment handling is a gigantic chore.\\n\\nIn 2021, the founder of Godot \u2014\xa0Juan Linietsky \u2014\xa0[confirmed a paid asset marketplace was on the way][godot-paid-assets].\\n\\nThe Godot team recently announced the formation of the non-profit [Godot Foundation][godot-foundation], citing a paid asset marketplace as one of the primary motivations:\\n\\n> As Godot keeps growing, so do our needs. Godot\'s size merits the flexibility of having its own organization and the opportunity to explore broader funding sources.\\n>\\n> Examples of this are crowdfunding campaigns (like Blender or Krita do), the highly requested ability for users to sell assets on an asset library (and have a share going to the Godot Foundation), selling merchandise, and other types of funding.\\n\\nWhile that doesn\'t solve the problem today, you can probably get pretty far with the 1,500+ free assets that already exist.\\n\\nFor some users, having access to a multitude of assets is non-negotiable. Those users will not use Godot until its asset library is a thriving, paid marketplace. For most developers, however, I believe the boost in developer productivity Godot provides over Unity _et al._ more than makes up for any reduction in assets.\\n\\nFor example: if you\'re creating your own art, or purchasing art and models from artists, you\'re probably writing all your own custom code anyways. Why not do it in Godot? The editor won\'t [hang for 2 minutes straight][unity-painful] whenever it decides to scan your assets, unlike in other engines, _cough cough_.\\n\\n### What About C#?\\n\\nPeople often ask \\"is C# a first class citizen?\\" when looking into Godot and C#. I believe the question became popular when Godot first introduced C#. Like all new features, C# support was initially incomplete and poorly documented, but solidified over time. These days, the [Godot Docs][godot-docs] provide almost every code example in both C# and GDScript, and C# support in Godot 3 (LTS) is incredibly robust.\\n\\nIf you are looking for C# API docs, [paulloz] maintains a [C# version of the Godot API docs][csharp-godot-docs].\\n\\nJust to reiterate, **Godot supports two first-party programming languages: GDScript and C#**. All other language bindings are unofficial, third party projects.\\n\\nWhen asked if the new `GDExtension` support in Godot would replace the need for first-party C# support, [neikeq] (one of the core Godot C# contributors), explained that C# support would continue to be built-in because it would be difficult (if even possible) [to load more than one .NET assembly through a native extension][native-extension].\\n\\n#### Future of C# Support\\n\\nI asked [neikeq] a couple of questions about C# in Godot via private message in Discord, and with their permission I am posting some of the interview here (lightly edited for clarity):\\n\\n> **me**: A lot of people are on the fence about Godot because they\'re not sure C# support is planned long term, or maybe they\'ve been burned by the lack of documentation in the past. What do you want them to know?\\n>\\n> **neikeq**:\\n> They shouldn\'t worry about C# support in the long term. There was a lot of concern about that this year because initially C# wasn\'t included with the Godot 4 alpha releases, but now it\'s already there and soon it will be unified as a single version of Godot.\\n>\\n> One of the most important factors for the future of C# support is that starting with Godot 4, it\'s much easier to maintain. There is still room for improvement (for example, changing/adding a type for marshalling takes a bit more work right now). But the amount of work we took off our shoulders is huge. That\'s time that can be spent on other parts like addressing issues.\\n>\\n> Hopefully there will be less confusion about some things as well. Previous marshalling errors that would be printed at runtime are now compiler errors.\\n>\\n> **me**: Is the maintenance effort easier because of the new source generators, or other changes that were made?\\n>\\n> **neikeq**: We no longer build the Mono runtime ourselves, which was especially painful on platforms like wasm, iOS and even Android sometimes. As well as having to maintain build code for some of those platforms and ensuring that it works (like AOT for iOS). That\'s all offloaded to MSBuild with the official .NET releases. Granted we don\'t have mobile and wasm support yet but when the time comes, it will be easier to implement. The new hosting + pure C# + source generators is also easier to maintain than our previous approach with the Mono embedding APIs (although marshalling needs to be improved in this regard as I mentioned).\\n>\\n> **me**: Any closing words to those who were worried C# support was going away?\\n>\\n> **neikeq**: **_We don\'t have any intention of removing C# support because a lot of people in the industry communicate to us that C# support is a big factor in adopting the engine._**\\n\\n### A Bigger C# Ecosystem\\n\\nStill skeptical about taking the plunge on an open source game engine? Allow me to sweeten the deal by showcasing some awesome C# projects.\\n\\nOur feature image for this article is from [SatiRogue][satirogue], a \\"turn-based dungeon-crawler rogue-like RPG, made with Godot 3.x C# + RelEcs\\" by [TetrisMcKenna][tetrismckenna]. The source code is freely available on GitHub under the MIT license.\\n\\n<FancyImage src={require(\\"./satirogue.jpg\\").default} alt=\\"SatiRogue\\">\\n</FancyImage>\\n\\n<Spacer><GithubCard profile=\'lewiji\' repo=\'SatiRogue\' /></Spacer>\\n\\nHere\'s a few other awesome projects written in C#:\\n\\n<Spacer><GithubCard profile=\'Carnagion\' repo=\'GDSerializer\' /></Spacer>\\n<Spacer><GithubCard profile=\'derkork\' repo=\'godot-test-driver\' /></Spacer>\\n<Spacer><GithubCard profile=\'Byteron\' repo=\'RelEcsGodot\' /></Spacer>\\n\\n## \ud83d\udc24 Free Stuff from Chickensoft\\n\\nChickensoft had a good first year: what originally started as a C#-focused fan club for Godot has blossomed into a small community of enthusiastic package authors and game developers. Our community members have helped answer technical questions about Godot and C#, shared a number of open source packages, and filed multiple bug reports on the Godot engine (some of which have already been fixed!).\\n\\n### Ready for Godot 4\\n\\nI\'m pleased to announce that **all of the Chickensoft packages have been officially updated for Godot 4!**\\n\\nBy adding a few nuget `<PackageReference>` tags to your `.csproj` file, you can get [node-based dependency provisioning][go_dot_dep], [logging][go_dot_log], [automated testing][go_dot_test], and [state machines][go_dot_net] up and running with Godot 4, for free!\\n\\n> All of the Chickensoft packages were dogfooded, meaning I built them because I was trying to solve the same problems every time I created a new game project. I never did finish a game, but at least I have some tools. Maybe next time...\\n\\n### Announcing GodotEnv\\n\\n[GodotEnv][godotenv] is a command line tool to help manage Godot addons and quickly create new Godot projects from a template.\\n\\n<FancyImage src=\'/img/chickensoft/godot_env.png\' alt=\\"GodotEnv CLI\\" widthOverride=\\"200px\\" />\\n\\n<Spacer><GithubCard profile=\'chickensoft-games\' repo=\'GodotEnv\' logo=\'/img/chickensoft/godot_env.png\'/></Spacer>\\n\\nWhile learning Godot, I kept running into the same few headaches over and over. When trying to make my code reusable across game projects, I realized there was no easy way to keep my addons up to date while I was still developing them. Likewise, whenever I created a new sandbox project, I had to copy a dozen or so files into the new project every time.\\n\\nGodotEnv\'s addon management system allows you to declare dependencies in their own file (to prevent versioning headaches with git submodules), while template generation enables you to quickly create new projects without having to copy over all the files you need each time.\\n\\n#### Addon Management, Simplified\\n\\nGodot addons are simply git repositories with an `addons/your_addon_name` folder inside them. The contents of that folder (scenes, scripts, art assets, etc) will be copied to a project folder\'s `addons/your_addon_name` when a user installs your addon. Because addons are a flat folder structure, people often think to use git submodules for addons in their project repositories. I initially tried git submodules and found it was too difficult to keep everything up-to-date across all of my projects that were using the addons.\\n\\n:::info\\nWhen using C# with Godot, you have two mechanisms for reusing code: addons and nuget packages.\\n\\nImporting nuget packages is as simple as adding them to your Godot project\'s `.csproj` file. Unfortunately, you can\'t really import scenes or other assets from nuget packages. They\'re only good for reusing code.\\n\\nAddons, on the other hand, allow you to reuse _anything_.\\n:::\\n\\nIf git submodules also sound too painful to you, GodotEnv allows you to declare what addons your project needs in an `addons.json` file so it can install them for you.\\n\\nGodotEnv also lets you install addons by copying or symlinking to local folders.\\n\\n```js\\n{\\n  \\"path\\": \\"addons\\",\\n  \\"cache\\": \\".addons\\",\\n  \\"addons\\": {\\n    \\"godot_dialogue_manager\\": {\\n      \\"url\\": \\"https://github.com/nathanhoad/godot_dialogue_manager\\",\\n      \\"source\\": \\"remote\\",\\n      \\"checkout\\": \\"main\\",\\n      \\"subfolder\\": \\"addons/dialogue_manager\\"\\n    },\\n    \\"my_local_addon_repo\\": {\\n      \\"url\\": \\"../my_addons/my_local_addon_repo\\",\\n      \\"source\\": \\"local\\"\\n    },\\n    \\"my_symlinked_addon\\": {\\n      \\"url\\": \\"/drive/path/to/addon\\",\\n      \\"source\\": \\"symlink\\"\\n    }\\n  }\\n}\\n```\\n\\nThen, all you have to do is run the following:\\n\\n```sh\\ngodotenv addons install\\n```\\n\\n## \ud83c\udfac Conclusion\\n\\nThe Godot ecosystem provides an [asset library][asset-library], [monthly game jams][game-jams], and numerous [developer communities][communities]. If you\'re using C# with Godot, you can use just about anything on [nuget] in your project, unlocking the entire C# ecosystem _in addition to everything Godot has to offer_. Whether you\'re still planning your project or putting the finishing touches on it, there\'s an entire ecosystem in place to support you. Godot apps can be released on every major platform, and multiple companies can provide support for developers who wish to publish their games [on consoles][consoles].\\n\\nMaking Godot games with C# is an incredible experience, and it\'s only getting better. If you\'re looking to start (or continue) your game development journey, you are more than welcome to be a part of our open source community here at Chickensoft.\\n\\n> If you\'re already making games with Godot and C# and want your project featured in a blog, let\'s get in touch!\\n\\n<BlogDiscordInvite />\\n\\n### Footnotes\\n\\n[^1]: Hosting the blog on a website instead of on Medium allows me to integrate custom widgets: it\'s a big win all around. If you like this website, [feel free to fork it][chickensoft-website]. Besides, hacker news readers (who have been the most engaged audience so far) tend to dislike Medium because of the reading limit. If you\'re reading this from hacker news (or anywhere else), welcome!\\n[^2]: Tune into around 00:48:00 of [The Role of Open Source Game Engines: Godot and O3DE][open-metaverse] on the Podcast [Building the Open Metaverse][open-metaverse-podcast]\\n\\n\x3c!-- Links --\x3e\\n\\n[asset-library]: https://godotengine.org/asset-library/asset\\n[game-jams]: https://godotwildjam.com\\n[communities]: https://godotengine.org/community/user-groups\\n[nuget]: https://www.nuget.org\\n[consoles]: https://godotengine.org/article/godot-consoles-all-you-need-know\\n[godot4beta]: https://godotengine.org/article/dev-snapshot-godot-4-0-beta-1#rendering\\n[open-metaverse]: https://uk-podcasts.co.uk/podcast/building-the-open-metaverse/the-role-of-open-source-game-engines-godot-and-o3d\\n[open-metaverse-podcast]: https://cesium.com/open-metaverse-podcast/\\n[juan]: https://twitter.com/reduzio\\n[patreon]: https://www.patreon.com/godotengine/posts\\n[r/godot]: https://www.reddit.com/r/godot/\\n[unity-problems]: /blog/indie-game-godot#unrest-in-the-indie-c-game-dev-world\\n[godot-discord]: https://discord.gg/4JBkykG\\n[reddit-asset-store-comment]: https://www.reddit.com/r/godot/comments/o5pam9/comment/h2o1u5w/?utm_source=share&utm_medium=web2x&context=3\\n[godot-foundation]: https://godotengine.org/article/godots-graduation-godot-moves-to-a-new-foundation\\n[unity-painful]: https://www.youtube.com/watch?v=7PpkAhVZMDc\\n[godot-docs]: https://docs.godotengine.org/en/stable/index.html\\n[paulloz]: https://twitter.com/pauljoannon\\n[csharp-godot-docs]: https://paulloz.github.io/godot-csharp-api/\\n[neikeq]: https://github.com/neikeq\\n[native-extension]: https://discord.com/channels/862108653488963604/1039016978528088074/1039212956438773843\\n[satirogue]: https://github.com/lewiji/SatiRogue\\n[tetrismckenna]: https://twitter.com/TetrisMcKenna\\n[godotenv]: https://github.com/chickensoft-games/GodotEnv\\n[chickensoft-website]: https://github.com/chickensoft-games/chickensoft_site\\n[go_dot_dep]: https://github.com/chickensoft-games/go_dot_dep\\n[go_dot_log]: https://github.com/chickensoft-games/go_dot_log\\n[go_dot_test]: https://github.com/chickensoft-games/go_dot_test\\n[go_dot_net]: https://github.com/chickensoft-games/go_dot_net\\n[godot-paid-assets]: https://twitter.com/reduzio/status/1395380550983196673"},{"id":"indie-game-godot","metadata":{"permalink":"/blog/indie-game-godot","source":"@site/blog/2022-07-03-indie-game-godot/index.md","title":"It\u2019s time to make that indie C# game in Godot.","description":"Wondering if you should take the plunge and use Godot with C#? Read this!","date":"2022-07-03T00:00:00.000Z","formattedDate":"July 3, 2022","tags":[],"readingTime":12.56,"hasTruncateMarker":true,"authors":[{"name":"Joanna","title":"Founder @ Chickensoft","url":"/authors/joanna","imageURL":"/img/authors/joanna.jpg","key":"joanna"}],"frontMatter":{"title":"It\u2019s time to make that indie C# game in Godot.","description":"Wondering if you should take the plunge and use Godot with C#? Read this!","image":"./header.jpg","slug":"indie-game-godot","keywords":["indie","csharp","godot","2022"],"authors":["joanna"]},"prevItem":{"title":"Godot and C#: A Viable Unity Alternative","permalink":"/blog/godot-unity-alternative"}},"content":"import BlogDiscordInvite from \'@site/src/components/blog_discord_invite/blog_discord_invite\';\\nimport FancyImage from \'@site/src/components/fancy_image/fancy_image\';\\n\\n<FancyImage src={require(\\"./header.jpg\\").default} alt=\\"Godot\'s Third Person Shooter Demo\\">\\n<a href=\\"https://github.com/godotengine/tps-demo\\">Third Person Shooter Demo</a> by the <a href=\\"https://godotengine.org\\">Godot Engine</a>\\n</FancyImage>\\n\\nYou\'ve always dreamed of making that C# game, but engines have always made it too difficult \u2014 until now.\\n\\n\x3c!--truncate--\x3e\\n\\n## Unrest in the indie C# game dev world\\n\\nFor some time, C# has been a popular choice for game developers, originally gaining popularity with Microsoft\u2019s XNA framework before being further popularized by tools like Monogame, Unity, and Godot.\\n\\nUnity, often considered the de facto engine of choice for C# game development, has been in the news a lot lately for [laying off a chunk of its workforce][unity-layoffs], [threatening to remove its forums][unity-forums], [shedding $5 billion in market cap][unity-market-cap], and [merging with a known adware company][unity-adware], IronSource. [Reddit comments][unity-reddit] are full of loyal Unity users starting to question if Unity has forgotten them, with comments ranging from \\"maybe I should learn Unreal\u2026\\" to \\"this is why you don\u2019t go public.\\"\\n\\nJust to be clear, I don\u2019t take pleasure in being critical of Unity, and I think it\u2019s a shame all those Unity employees are losing their jobs. At first glance, Unity is so laughably ahead of Godot in sheer number of features supported that it seems comical to compare the two. One is an industry behemoth and the world\u2019s most popular game engine, while the other is a free, 30 megabyte program developed by passionate developers in their free time.\\n\\nUnity can _technically_ do much more than Godot, at least on paper. In practice, Unity requires 3rd party tools for tweens, timers, and networking, all of which Godot includes out-of-the-box. Still, I\u2019d argue that _it doesn\u2019t actually matter_ for the vast majority of us indie game developers. The rest of this blog only exists to convince you of that argument.\\n\\nDo you want to make the world\u2019s best-looking game with the latest, buggy technologies, or do you want to _actually have fun_ making games? If you said yes to the last part of that question, I\u2019d like to invite you to try [Godot][godot]. If you\u2019ve already tried Godot a while back and gave up, I\u2019d like to ask you to give Godot another chance. It might be better now than you realize.\\n\\n## Unity isn\u2019t fun anymore\\n\\nIt\u2019s no secret that [Unity is painful to use][unity-painful]: it\u2019s slow to open, and it often pauses to re-scan the entire project while you\u2019re trying to work. If you\u2019re trying to use source control with a few other people, you have to work even harder to get everything to play nice with Unity\u2019s unique file formats. By modern standards, Unity development can feel a bit backwards at times.\\n\\nWhen you open Godot, it opens almost instantaneously. The UI is just the right size, and all of the controls are easily accessible in a few simple panes you can rearrange to your liking.\\n\\nIn Godot, everything is composed of nodes. No prefabs, game components, or other abstractions to learn. Just nodes. A scene is just a tree of nodes, saved as a plain text file in a familiar configuration format that you can easily read in a text editor. Need to quickly edit a scene to fix a reference to a file that was renamed or moved outside of Godot? Just open it up in your code editor and fix the path. When you switch back to the Godot editor, it will reload the project before you can blink. There\u2019s no difficulty with source control, either: everything just works because everything\u2019s text.\\n\\nGodot also gives you full control of your `.csproj` file, allowing you to setup dependencies and configure MSBuild as much as you want. Want to use code generators? You can do that. Custom Roslyn analyzers? Go for it. Your own nuget packages? Check.\\n\\n## It\'s actually fun to use Godot\\n\\nGodot doesn\u2019t fight you when you\u2019re building scenes. Making a scene feels a lot like creating a class using [composition], and scenes can even [inherit] from other scenes (using another scene as the the root node of a scene allows you to inherit from it and override its properties in the editor and in code), allowing you to express patterns you\u2019re intimately familiar with from object-oriented programming.\\n\\nWasn\u2019t \\"having fun\\" the whole point of making a game in C#, anyways? Using a managed language was supposed to make creating games easier, not harder. _Don\u2019t worry about all the bits and bytes, C# will take care of it for you._ Sadly, we lost that along the way when for-profit game engine companies decided to prioritize the monetization of their tools over the happiness of their users. It isn\u2019t that way with Godot: making C# games is fun again.\\n\\n## But what about Unity\'s asset store?\\n\\n\\"Alright, I want to switch to Godot,\\" you say, \\"but I need those high quality paid assets from the Unity Asset Store since I\u2019m not an artist/musician/expert coder/etc.\\"\\n\\nUnfortunately, the paid asset store is the biggest sacrifice you\u2019ll have to make. While it can\u2019t always compare to Unity\u2019s paid offerings, the [Godot Asset Library][godot-asset-library] offers 1300+ creations _for free_. Have you seen [all of the awesome stuff][awesome-godot] people have made in Godot?\\n\\n> It\u2019s possible that [donations or payments will be coming to the Godot Asset Library][godot-paid], allowing creators to be rewarded for their work, but I haven\u2019t heard anything conclusive just yet. If it does, expect a lot more high-quality assets in the near future.\\n\\nMost people would probably agree that being retired with a terrible disease that affects your quality of life is a lot worse than being retired in good health. So why would you keep using a game engine that\u2019s making you miserable? Making games is supposed to be _fun_!\\n\\nIf it\u2019s just the Unity Asset Store holding you back, there\u2019s probably nothing I can say to convince you to give Godot a chance. But if you\u2019re resourceful and don\u2019t mind a little extra work, and/or you\u2019re willing to port your scripts over and import your 3D models into Godot, you might be pleasantly surprised by what you\u2019re missing.\\n\\n## You\u2019re the star of the show\\n\\nGodot prioritizes developer experience. I don\u2019t think that\u2019s explicitly written in the docs, and I\u2019ve never heard anyone else say it, but that\u2019s how I feel when I use Godot. Sure, it has fewer features than the dominating game engines, but the \u201cfew\u201d features it does have are so polished and well thought-out that it\u2019s a joy to use. When I use Godot, I feel special. Godot\u2019s docs are thorough, well-written, and explanatory. If you\u2019re really stuck, you can look through it\u2019s source code (I\u2019ve actually done that a few times and figured things out). Everything just works (generally), right out of the box!\\n\\nDid you know that killer features like Godot 4\u2019s `NavigationServer` (with local object avoidance) [are now available][godot-now-avail] as of 3.5? You can even compute navigation meshes at runtime. The Godot developers prove their commitment to you by back-porting some of the most valuable features that were developed for 4.0. They\u2019re doing that because _you \u2014 the game developer_ \u2014 are the focal point of their universe.\\n\\nThe Godot team is not seeking commercial success. It\u2019s the same strategy that worked for Blender: make the best possible program _for the people_. They couldn\u2019t make it any clearer: the Godot team wants you to have a good time making games!\\n\\n## \\"I\u2019ll wait until the next version.\\"\\n\\nA lot of people are holding out for Godot 4.0. Either they\u2019re procrastinating, or they sincerely believe Godot can\u2019t do what they want it to do. That might be true for a big team making the next big thing, but for most of us indie devs \u2014 really? You can\u2019t start work on _anything_ yet just because Godot doesn\u2019t have LOD? I have a hard time believing that.\\n\\nLong-time Unity users probably know the feeling of waking up to find out that a feature they really enjoyed (or relied on) was getting axed because Unity wanted to monetize something differently instead of _just making the developers happy._\\n\\nChances are, by the time you succeed in pushing the limits of Godot, a new version will have been released that can do even more.\\n\\nWe\u2019re not waiting on Godot anymore, and neither should you. It\u2019s time for you to be happy.\\n\\n## C# in Godot: where we\u2019re at in 2022\\n\\nC# support in Godot has come a long ways since it was first introduced years ago. Godot allows you to use C# 10, which makes for an incredible developer experience (Unity doesn\u2019t even fully support C# 9).\\n\\nWhile the C# Godot community is fairly small (about [14% of the approximately 5,000][csharp-users] users who responded to the Godot Community Poll 2022 are using C#), we\u2019ve been able to create [addon managers][addons], [test frameworks][test-frameworks], [serializers], [mod loaders][mod-loaders], [logging], [node-based dependency managers][node-dep], [Steam integrations][steam], and so much more.\\n\\nOn Reddit, [r/Godot][r-godot] has 90,000+ members. The [official discord][official-discord] has well over 45,000. With thousands more joining all the time, you\u2019d be in good company. [Tons of games on Steam][steam-games] are released using Godot. [On Patreon][patreon], Godot is bringing in over $15,000 a month.\\n\\n## C# in Godot\\n\\nSetting up a complex Godot project with C# can be a bit tricky, especially if you\u2019re not familiar with the strange hell that is MSBuild. In spite of it all, the community has helped me accomplish everything I\u2019ve ever wanted to do.\\n\\n> I\u2019ve spent a lot of time documenting how to setup C# projects in Godot, especially since a lot of the people wanting to use C# with Godot are fairly new to it. If you want some examples and documentation for how to setup and structure your project, I highly encourage you to check out some of the GitHub repositories for my organization, [Chickensoft][chickensoft]. Or you can pop into our [Discord][discord] server and we\u2019ll be happy to help!\\n\\n### But what about testing?\\n\\nIf you\u2019re a test-driven development occultist (or just enthusiastic about testing), you might be wondering how to write tests for your C# Godot game. For a while, that was very difficult, unless you were using XUnit with [Rider][rider] (which has its own challenges).\\n\\nTesting is no longer difficult to setup. There are multiple libraries for writing tests for C# Godot code, including Chickensoft\'s official [test framework, go_dot_test][test-frameworks] that lets you debug tests from VSCode, collect coverage, and run tests from the command line.\\n\\n### What\u2019s missing in the Godot C# ecosystem?\\n\\nWhile Godot\u2019s C# support is truly incredible, the ecosystem is fairly light on utilities, particularly networking frameworks and deep editor integrations for C#. There\u2019s also no single, direct equivalent to tools like [Odin][odin] for Unity. If you\u2019re up for the challenge of being an early adopter and lie awake at night thinking about open source software, you could be the one to create the next big, useful tool for the Godot C# world.\\n\\nWhile Godot has incredible, easy-to-use RPC networking support built into the current 3.x versions, it doesn\u2019t have the ability to swap out transports to use something like Steamworks or other messaging protocols under the hood, at least from what I understand. [That might be coming in 4.0][swap-transports].\\n\\nEven so, we\'re currently building our own networking library in C# for Godot, loosely inspired by [Mirror] and [Netcode for GameObjects][netcode-for-game-objects] that circumvents Godot\u2019s networking entirely, for those who might want a more custom approach to networking or need to support certain transports. I\u2019ll take all the help I can get, too, because I am way out of my depth on this one!\\n\\n### What else should I know about C# in Godot?\\n\\nLike other engines, Godot marshals types back and forth between its C++ and C# layers. Not all types can convert into one of Godot\u2019s types, but it isn\u2019t as big of a problem as you might think. For most game logic, you can create classes, records, and structs the way you normally would, and everything will work fine in the C# layer.\\n\\nIf you need to pass a type to a Godot subsystem, or to a node that\u2019s using GDScript, you\u2019ll want to make sure any custom objects involved are C# classes that extend `Godot.Object` (or `Godot.Reference`), since that\u2019s the only way Godot can serialize and track values correctly (the c++ layer uses reference counting, not garbage collection). You can also use C#\u2019s events, which are strongly typed, but if you need to interface with node events, you should use Godot\u2019s signal system. In general, I tend to prefer vanilla C# features over Godot types to avoid marshaling penalties and to leverage C#\u2019s strong typing. When I need to interface with Godot nodes, GDScript, or anything that expects Godot types, I adopt Godot\u2019s way of doing things. So far, that has worked out really well for me, and I think it will for you, too.\\n\\n### What about asynchrony?\\n\\nUsing `async` and `await` with C#\u2019s Task can be a bit of a headache with Godot, especially if you don\u2019t realize that that most ways of executing an async Task in C# starts a new thread (or recycles one from the task thread pool). In general, I recommend avoiding asynchrony where possible, unless you have a good way of keeping it self-contained and use it only where absolutely necessary, such as for loading systems or in integration tests (where you need to `await` across frames). If you can\u2019t escape asynchrony, you can always use C# events to interface with the rest of your synchronous code to keep things simple.\\n\\n### C# constructors and Godot\\n\\nBecause of the way Godot spins up classes, you should avoid creating values in your Godot Node\u2019s constructor and instead initialize values when Godot calls your node\u2019s `_Ready` method. If you try to do it too early, you introduce a lot of instability in your game. Since C# doesn\u2019t have a `late` modifier (Dart) or `lazy` (Kotlin), you can simply initialize values to `null` (or `null!` if you\u2019re using null-aware code) and finish initializing your fields in `_Ready`.\\n\\nI know that\u2019s a little technical, but knowing those few things should save you a few headaches. It certainly would have helped us!\\n\\n## Open source always wins\\n\\nGodot may not ever be the dominating game engine, but we believe an open source game engine will dominate the field someday, given enough time. Godot prioritizes developers, and when developers win, everyone else eventually wins, too.\\n\\nSo what are you waiting on? It\u2019s certainly not Godot. Make that indie C# game you\u2019ve been dreaming about! We\u2019ll always be in [Discord][discord] to help! Visit [Chickensoft][chickensoft] on Github!\\n\\n<BlogDiscordInvite />\\n\\n\x3c!-- Links --\x3e\\n\\n[discord]: https://discord.gg/MjA6HUzzAE\\n[unity-layoffs]: https://www.techspot.com/news/95143-unity-laying-off-hundreds-employees-shares-continue-slide.html\\n[unity-forums]: https://forum.unity.com/threads/unity-answers-shutdown-canceled.1293360/\\n[unity-market-cap]: https://www.marketwatch.com/story/unity-software-loses-5-billion-in-market-cap-after-apples-changes-lead-to-self-inflicted-wound-11652291876\\n[unity-adware]: https://news.ycombinator.com/item?id=32081051\\n[unity-reddit]: https://www.reddit.com/r/Unity3D/comments/vp1kv7/unity_employees_mad_and_stressed_out_amidst/\\n[godot]: https://godotengine.org/\\n[unity-painful]: https://www.youtube.com/watch?v=7PpkAhVZMDc\\n[composition]: https://en.wikipedia.org/wiki/Object_composition\\n[inherit]: https://github.com/godotengine/godot-docs/issues/5529\\n[godot-asset-library]: https://godotengine.org/asset-library/asset\\n[awesome-godot]: https://github.com/godotengine/awesome-godot\\n[godot-paid]: https://github.com/godotengine/godot-asset-library/issues/126\\n[godot-now-avail]: https://godotengine.org/article/release-candidate-godot-3-5-rc-5\\n[csharp-users]: https://docs.google.com/forms/d/e/1FAIpQLSe-OIpxXqou9cDnPXEAjxzpICbf8_YZB3jUizdECXRydtB8cA/viewanalytics\\n[addons]: https://github.com/chickensoft-games/GodotEnv\\n[test-frameworks]: https://github.com/chickensoft-games/go_dot_test\\n[serializers]: https://github.com/Carnagion/GDSerializer\\n[mod-loaders]: https://github.com/Carnagion/Modot\\n[logging]: https://github.com/chickensoft-games/go_dot_log\\n[node-dep]: https://github.com/chickensoft-games/go_dot_net\\n[steam]: https://github.com/chickensoft-games/GameTemplate\\n[r-godot]: https://www.reddit.com/r/godot/\\n[official-discord]: https://discord.gg/4JBkykG\\n[steam-games]: https://godotes.com/q1-2022/\\n[patreon]: https://www.patreon.com/godotengine/posts\\n[chickensoft]: https://github.com/chickensoft-games\\n[rider]: https://www.jetbrains.com/rider/\\n[odin]: https://assetstore.unity.com/packages/tools/utilities/odin-inspector-and-serializer-89041\\n[swap-transports]: https://godotengine.org/article/multiplayer-changes-godot-4-0-report-3\\n[mirror]: https://github.com/vis2k/Mirror\\n[netcode-for-game-objects]: https://github.com/Unity-Technologies/com.unity.netcode.gameobjects"}]}')}}]);